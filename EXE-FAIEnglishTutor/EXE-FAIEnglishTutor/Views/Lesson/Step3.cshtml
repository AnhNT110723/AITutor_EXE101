@using Newtonsoft.Json
@{
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
    ViewData["Title"] = $"Step 3 - {ViewBag.Lesson.SituationName}";
}

<div id="content" class="p-4 p-md-5 home">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <button type="button" id="sidebarCollapse" class="btn btn-sidebar-custom">
                <i class="fa fa-bars"></i>
                <span class="sr-only">Toggle Menu</span>
            </button>
            <button class="btn btn-dark d-inline-block d-lg-none ml-auto" type="button" data-toggle="collapse"
                    data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                    aria-label="Toggle navigation">
                <i class="fa fa-bars"></i>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="nav navbar-nav ml-auto">
                    @if (User.Identity.IsAuthenticated)
                    {
                        var fullName = User.Identity.Name;
                        var avatarUrl = User.FindFirst("Avatar")?.Value;
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle nav-link-avatar" href="#" id="avatarDropdown" role="button"
                               data-toggle="dropdown" aria-expanded="false">
                                <div class="nav-img">
                                    <img src="@avatarUrl" alt="Avatar" class="img-fluid" style="border-radius: 50%;">
                                </div>
                            </a>
                            <div class="menu-items dropdown-menu dropdown-menu-right" aria-labelledby="avatarDropdown">
                                <div class="menu-title">
                                    <h6 class="dropdown-header">Hello, <span>@fullName</span></h6>
                                </div>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" asp-area="Mentee" asp-controller="Profile" asp-action="index">
                                    <i class="bi bi-person-circle"></i> View Profile
                                </a>
                                <div class="dropdown-divider"></div>
                                <a id="logout-link" class="dropdown-item text-danger" href="#">
                                    <i class="bi bi-box-arrow-right"></i> <span id="logoutOption">Logout</span>
                                </a>
                                <form id="logoutForm" asp-controller="Account" asp-action="Logout" method="post" style="display: none;"></form>
                            </div>
                        </li>
                    }
                    else
                    {
                        <a class="btn-login-custom btn" asp-controller="Account" asp-action="Login">Đăng nhập</a>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <div class="p-4 p-md-5">
        <!-- Progress Bar -->
        <div class="lesson-progress">
            <div class="progress-container">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 100%"></div>
                </div>
                <div class="progress-steps">
                    <div class="step active">
                        <div class="step-number">1</div>
                        <div class="step-label">Pronunciation Preview</div>
                    </div>
                    <div class="step active">
                        <div class="step-number">2</div>
                        <div class="step-label">First Listening</div>
                    </div>
                    <div class="step active">
                        <div class="step-number">3</div>
                        <div class="step-label">Second Listening</div>
                    </div>
                   
                </div>
            </div>
            <div class="listening-container">
                <!-- Lesson Header -->
                <div class="lesson-header">
                    <h2 class="lesson-title">@ViewBag.Lesson.SituationName</h2>
                    <p class="lesson-subtitle">Fill in the blanks - Listen and complete the sentences</p>
                </div>

                <!-- Audio Player Section -->
                <div class="audio-player-container">
                    <audio id="listeningAudio"  controls style="display: none;"></audio>
                    <div class="podcast-player">
                        <div class="player-artwork">
                            <img src="@ViewBag.Lesson.ImageUrl" alt="Lesson Cover" />
                        </div>
                        <div class="player-controls">
                            <div class="time-display">
                                <span id="currentTime">0:00</span> / <span id="duration">0:00</span>
                            </div>
                            <div class="progress-container">
                                <div id="audioProgress" class="audio-progress">
                                    <div id="audioProgressBar" class="audio-progress-bar"></div>
                                </div>
                            </div>
                            <div class="control-buttons">
                                <button id="backwardBtn" class="control-btn" type="button">
                                    <i class="fas fa-backward"></i>
                                </button>
                                <button id="playPauseBtn" class="control-btn play-btn pulse" type="button">
                                    <i class="fas fa-play"></i>
                                </button>
                                <button id="forwardBtn" class="control-btn" type="button">
                                    <i class="fas fa-forward"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Fill the Blank Section -->
                <div class="fill-the-blank-section">
                    <div class="fill-the-blank-instructions">
                        <h3><i class="fas fa-pencil-alt"></i> Fill the blanks - Part <span id="partNumber">1</span>/3</h3>
                        <p><strong>Instructions:</strong> Listen to the audio and fill in the missing words in the sentences below.</p>
                    </div>
                    <div class="fill-the-blank-container" id="fillTheBlankContainer">
                        <!-- Sentences will be rendered here by JS -->
                    </div>
                    <div class="fill-the-blank-actions" id="fillTheBlankActions">
                        <button id="prevPartBtn" class="btn-primary" style="display:none;">Previous Part</button>
                        <button id="nextPartBtn" class="btn-primary" style="display:none;">Next Part</button>
                        <button id="submitFillBlankBtn" class="btn-primary">Check Answers</button>
                        <button id="showFillBlankAnswerBtn" class="btn-primary" style="display:none;">Show Answers</button>
                    </div>
                    <div id="fillBlankFeedback" style="margin-top:1.5rem;"></div>
                </div>

                <!-- Script Preview (debug, xóa nếu muốn) -->
               

                <div class="bottom-navigation">
                    <form id="prevStepForm" method="post" action="@Url.Action("Step2Pre", "Lesson")" style="display: inline;">
                        <input type="hidden" name="id" value="@ViewBag.Lesson.SituatuonId" />
                        <input type="hidden" name="script" value="@ViewBag.Script" />
                        <input type="hidden" name="audioData" value="@ViewBag.AudioData" />
                        <input type="hidden" name="questions" value="@JsonConvert.SerializeObject(ViewBag.Questions ?? new List<IeltsQuestion>())" />
                        <button type="submit" class="nav-btn prev">
                            <i class="fas fa-arrow-left"></i> Previous
                        </button>
                    </form>
                    <a href="/Mentee/Listening" class="nav-btn next">
                        <i class="fas fa-list"></i> Back to List
                    </a>
                </div>
            </div>
        </div>
    </div>
    <script src="~/js/handle-sidbar/home-sidebar.js"></script>
    <script>
                $(document).ready(function () {
            // Sidebar toggle functionality
            $('#sidebarCollapse').on('click', function () {
                $('#sidebar').toggleClass('collapsed');
            });
        });
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <style>
        /* ... giữ nguyên các style trước ... */
        .fill-the-blank-section {
            max-width: 700px;
            margin: 2rem auto;
            background: #fff;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 2px 15px rgba(255, 152, 56, 0.08);
        }

        .fill-the-blank-instructions {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .fill-blank-item {
            display: flex;
            align-items: center;
            font-size: 1.15rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .fill-blank-input {
            font-size: 1rem;
            border: 2px solid #ffb347;
            border-radius: 7px;
            background: #fff1e6;
            margin: 0 4px;
            text-align: center;
            transition: border 0.2s, background 0.2s;
        }

            .fill-blank-input:focus {
                outline: none;
                border-color: #ff9838;
                background: #fffbe6;
            }

        .fill-blank-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 1.5rem;
        }
        .replay-group-custom {
            display: flex;
            align-items: center;
            background: #FFA73C;
            border-radius: 20px;
            padding: 0 18px 0 0;
            height: 60px;
            min-width: 120px;
            position: relative;
            box-shadow: 0 1px 6px rgba(255,152,56,0.09);
        }

        .replay-sentence-btn-custom {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: #FFA73C;
            color: #fff;
            border: none;
            font-size: 1.7rem;
            cursor: pointer;
            position: relative;
            margin-right: 10px;
            box-shadow: none;
            transition: background 0.16s;
        }

            .replay-sentence-btn-custom:active,
            .replay-sentence-btn-custom:focus {
                background: #ff9000;
            }

            .replay-sentence-btn-custom i {
                font-size: 1.5rem;
                margin: 0;
                pointer-events: none;
            }

        .replay-count-custom {
            color: #fff;
            font-weight: 600;
            font-size: 1.2rem;
            align-items: center;
            display: flex;
            height: 60px;
            padding-left: 8px;
            padding-right: 8px;
            letter-spacing: 1px;
            background: transparent;
        }

        .listening-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
            background: #fff;
            border-radius: 20px;
            box-shadow: 0 4px 20px rgba(255, 152, 56, 0.1);
        }

        .podcast-player {
            display: flex;
            align-items: center;
            background: #fff;
            border-radius: 15px;
            padding: 1.5rem;
            margin: 2rem 0;
            box-shadow: 0 4px 15px rgba(255, 152, 56, 0.1);
        }

        .player-artwork {
            width: 150px;
            height: 150px;
            border-radius: 10px;
            overflow: hidden;
            margin-right: 2rem;
        }

            .player-artwork img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

        .player-controls {
            flex: 1;
        }

        .control-buttons {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1.5rem;
            margin-top: 1rem;
        }

        .play-btn {
            width: 60px;
            height: 60px;
            font-size: 1.5rem;
        }

        .tool-buttons {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin: 2rem 0;
        }

        .tool-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 1rem;
            border: none;
            background: #fff;
            border-radius: 12px;
            color: #ff9838;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 10px rgba(255, 152, 56, 0.1);
        }

            .tool-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(255, 152, 56, 0.2);
            }

            .tool-btn i {
                font-size: 1.5rem;
                margin-bottom: 0.5rem;
            }

        .transcript-line {
            display: flex;
            align-items: center;
            padding: 1rem;
            margin: 0.5rem 0;
            background: #fff;
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .line-number {
            min-width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #ff9838;
            color: white;
            border-radius: 50%;
            margin-right: 1rem;
        }

        .line-text {
            flex: 1;
        }

        .transcript-line:hover {
            background: #fff1e6;
            transform: translateX(5px);
        }

        .transcript-line.active {
            background: #ff9838;
            color: white;
        }

            .transcript-line.active .line-number {
                background: white;
                color: #ff9838;
            }

        .audio-player-container {
            width: 70%;
            margin: 0 auto;
            padding: 1rem;
            background: rgba(255, 152, 56, 0.1);
            border-radius: 15px;
            transition: all 0.3s ease;
        }

            .audio-player-container:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(255, 152, 56, 0.2);
            }

        .audio-controls {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            padding: 1rem;
        }

        .control-btn {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: none;
            background: #ff9838;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

            .control-btn.pulse::before {
                content: '';
                position: absolute;
                width: 100%;
                height: 100%;
                border-radius: 50%;
                background: rgba(255, 152, 56, 0.4);
                animation: pulse 2s infinite;
            }

        @@keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 0.8;
            }

            70% {
                transform: scale(1.3);
                opacity: 0;
            }

            100% {
                transform: scale(1);
                opacity: 0;
            }
        }

        .progress-container {
            flex: 1;
            margin-right: 1rem;
        }

        .audio-progress {
            height: 8px;
            background: rgba(255, 152, 56, 0.2);
            border-radius: 4px;
            cursor: pointer;
            margin-bottom: 0.5rem;
            overflow: hidden;
        }

        .audio-progress-bar {
            height: 100%;
            background: #ff9838;
            border-radius: 4px;
            transition: width 0.1s linear;
            position: relative;
        }

            .audio-progress-bar::after {
                content: '';
                position: absolute;
                right: -2px;
                top: 50%;
                transform: translateY(-50%);
                width: 12px;
                height: 12px;
                background: #ff9838;
                border-radius: 50%;
                box-shadow: 0 0 5px rgba(0,0,0,0.2);
            }

        .time-display {
            color: #ff9838;
            font-weight: 500;
            font-size: 0.9rem;
        }
        /* Progress Bar Styles */
        .lesson-progress {
            max-width: 800px;
            margin: 0 auto 2rem;
        }

        .progress-container {
            position: relative;
            padding: 20px 0;
        }

        .progress-bar {
            width: 100%;
            height: 4px;
            background: #e0e0e0;
            border-radius: 2px;
            position: absolute;
            top: 50px;
            z-index: 1;
        }

        .progress-fill {
            width: 50%; /* 3/5 of the total width */
            height: 100%;
            background: linear-gradient(90deg, #ff9838 0%, #ffb347 100%);
            border-radius: 2px;
            transition: width 0.5s ease;
            position: relative;
        }

        .progress-steps {
            display: flex;
            justify-content: space-between;
            position: relative;
            z-index: 2;
        }

        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            color: #999;
            position: relative;
        }

            .step.active {
                color: #ff9838;
            }

                .step.active .step-number {
                    background: #ff9838;
                    color: white;
                }

        .step-number {
            width: 30px;
            height: 30px;
            background: #e0e0e0;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-bottom: 8px;
            transition: all 0.3s ease;
        }

        .step-label {
            font-size: 0.85rem;
            font-weight: 500;
            text-align: center;
            white-space: nowrap;
        }

        :root {
            --primary-color: #ff9838;
            --primary-dark: #ff8108;
            --primary-light: #ffb347;
            --text-dark: #2c3e50;
            --text-light: #7f8c8d;
            --bg-light: #f8f9fa;
            --white: #ffffff;
        }

        .listening-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
        }

        .lesson-header {
            text-align: center;
            margin-bottom: 2.5rem;
        }

        .lesson-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        .situation-box {
            background: var(--bg-light);
            border-radius: 10px;
            padding: 1.5rem;
            margin: 1rem auto;
            border-left: 4px solid var(--primary-color);
        }

        .audio-section {
            background: var(--white);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            margin: 2rem 0;
        }

        .audio-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-top: 1rem;
        }

        .control-btn {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            border: none;
            background: var(--primary-color);
            color: var(--white);
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .control-btn:hover {
                background: var(--primary-dark);
                transform: scale(1.05);
            }

        .audio-progress {
            flex: 1;
            height: 6px;
            background: var(--bg-light);
            border-radius: 3px;
            cursor: pointer;
        }

        .audio-progress-bar {
            height: 100%;
            background: var(--primary-color);
            border-radius: 3px;
            transition: width 0.1s linear;
        }

        .question-card {
            background: var(--white);
            border-radius: 10px;
            padding: 1.5rem;
            margin: 1rem 0;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .option {
            margin: 0.8rem 0;
            padding: 0.8rem;
            border-radius: 8px;
            background: var(--bg-light);
            transition: all 0.3s ease;
        }

            .option:hover {
                background: #fff1e6;
            }

        .btn-primary {
            background: var(--primary-color);
            color: var(--white);
            border: none;
            padding: 0.8rem 2rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .btn-primary:hover {
                background: var(--primary-dark);
                transform: translateY(-2px);
            }

        .score-summary {
            background: var(--bg-light);
            border-radius: 12px;
            padding: 1.5rem;
            text-align: center;
            margin-top: 2rem;
        }

        .bottom-navigation {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
        }

        .nav-btn {
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            text-decoration: none;
            transition: all 0.3s ease;
        }

            .nav-btn.prev {
                background: var(--bg-light);
                color: var(--text-dark);
            }

            .nav-btn.next {
                background: var(--primary-color);
                color: var(--white);
            }

            .nav-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            }

        .transcript-controls {
            margin: 2rem 0;
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        .transcript-container {
            background: var(--bg-light);
            border-radius: 12px;
            padding: 2rem;
            margin: 2rem 0;
            max-height: 400px;
            overflow-y: auto;
        }

        .full-transcript {
            line-height: 1.6;
            white-space: pre-wrap;
        }

        .line-by-line-transcript .transcript-line {
            padding: 0.5rem;
            margin: 0.5rem 0;
            border-radius: 8px;
            background: var(--white);
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .line-by-line-transcript .transcript-line:hover {
                background: #fff1e6;
            }

            .line-by-line-transcript .transcript-line.active {
                background: var(--primary-light);
                color: var(--white);
            }

        .highlighted {
            background-color: #ffeb3b;
            padding: 0 2px;
            border-radius: 3px;
        }

        .highlight-mode {
            cursor: pointer;
        }

        .transcript-sentence {
            display: inline-block;
            padding: 2px 5px;
            margin: 2px;
            cursor: pointer;
            border-radius: 3px;
            transition: all 0.2s ease;
        }

            .transcript-sentence:hover {
                background-color: rgba(255, 152, 56, 0.1);
            }

            .transcript-sentence.active {
                background-color: rgba(255, 152, 56, 0.2);
                color: #ff9838;
            }

        .transcript-line {
            position: relative;
            padding-left: 50px;
        }

            .transcript-line::before {
                content: attr(data-start-time) 's';
                position: absolute;
                left: 10px;
                color: #999;
                font-size: 0.8em;
            }

        .lesson-subtitle {
            color: var(--text-light);
            font-size: 1.1rem;
            margin-bottom: 2rem;
        }

        .dictation-section {
            background: var(--white);
            border-radius: 15px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: 0 4px 15px rgba(255, 152, 56, 0.1);
        }

        .dictation-instructions {
            text-align: center;
            margin-bottom: 2rem;
        }

            .dictation-instructions h3 {
                color: var(--primary-color);
                margin-bottom: 1rem;
            }

            .dictation-instructions p {
                color: var(--text-light);
                font-size: 1rem;
            }

        .dictation-container {
            width: 100%;
            margin-top: 12px;
        }

        .dictation-item {
            background: #fff;
            border-radius: 14px;
            border: 1px solid #eee;
            box-shadow: 0 2px 8px rgba(0,0,0,0.02);
            margin-bottom: 22px;
            padding: 16px 22px 20px 22px;
        }

        .sentence-controls {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .control-left {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .circle {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 38px;
            height: 38px;
            border-radius: 50%;
            background: #FFA73C;
            color: #fff;
            font-size: 1.18rem;
            font-weight: 700;
            border: none;
            cursor: pointer;
            transition: background 0.2s;
            box-shadow: 0 1px 2px rgba(0,0,0,0.04);
            position: relative;
        }

            .circle.icon-btn i {
                font-size: 1.1rem;
                pointer-events: none;
            }

            .circle.icon-btn:active,
            .circle.icon-btn:focus {
                background: #ff9000;
            }

        .replay-sentence-btn {
            position: relative;
            padding-right: 30px !important;
        }

        .replay-count {
            position: absolute;
            right: 6px;
            bottom: 6px;
            background: #FFE7C2;
            color: #FFA73C;
            border-radius: 10px;
            padding: 2px 8px;
            font-size: 0.98rem;
            font-weight: 600;
            min-width: 36px;
            text-align: center;
            box-shadow: 0 1px 2px rgba(0,0,0,0.03);
        }

        .status-badge {
            padding: 5px 18px;
            border-radius: 14px;
            font-size: 1.02rem;
            font-weight: 500;
            background: #FFF4D6;
            color: #b8860b;
            border: 1px solid #ffe3a1;
            box-shadow: 0 1px 2px rgba(0,0,0,0.02);
        }

            .status-badge.incomplete {
                background: #FFF4D6;
                color: #b8860b;
            }

            .status-badge.complete {
                background: #e5fad7;
                color: #2a7b3f;
                border: 1px solid #badaaf;
            }

        .dictation-input-container {
            margin-top: 8px;
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .dictation-input {
            width: 100%;
            border-radius: 8px;
            border: 1px solid #f0c788;
            padding: 10px 12px;
            font-size: 1.08rem;
            resize: vertical;
            background: #fff9ed;
            transition: border 0.2s;
        }

            .dictation-input:focus {
                border-color: #ffa73c;
                outline: none;
            }

        .word-count {
            align-self: flex-end;
            font-size: 0.98rem;
            color: #ffa73c;
            margin-top: 2px;
            font-weight: 500;
        }

        .status-indicator {
            padding: 4px 10px;
            font-size: 12px;
            font-weight: 600;
            border-radius: 12px;
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeeba;
        }


        .dictation-input-container {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .dictation-input {
            width: 100%;
            padding: 0.7rem;
            border-radius: 8px;
            border: 1px solid #ccc;
            font-size: 1rem;
        }

        .word-count {
            font-size: 0.8rem;
            color: #666;
            text-align: right;
        }

        .sentence-number {
            background: var(--primary-color);
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .play-sentence-btn, .replay-sentence-btn {
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .play-sentence-btn:hover, .replay-sentence-btn:hover {
                background: var(--primary-dark);
                transform: scale(1.1);
            }

        .completion-status {
            margin-left: auto;
        }

        .status-indicator {
            padding: 0.3rem 0.8rem;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 500;
        }

            .status-indicator.incomplete {
                background: #fff3cd;
                color: #856404;
                border: 1px solid #ffeaa7;
            }

            .status-indicator.complete {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }

        .dictation-input-container {
            position: relative;
        }

        .dictation-input {
            width: 100%;
            padding: 1rem;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1rem;
            resize: vertical;
            transition: border-color 0.3s ease;
        }

            .dictation-input:focus {
                outline: none;
                border-color: var(--primary-color);
            }

            .dictation-input.complete {
                border-color: #28a745;
                background-color: #f8fff9;
            }

        .word-count {
            position: absolute;
            bottom: 0.5rem;
            right: 1rem;
            font-size: 0.8rem;
            color: var(--text-light);
        }

        .instruction-note {
            color: var(--text-light);
            font-size: 0.9rem;
            margin-top: 0.5rem;
            background: #fff3cd;
            padding: 0.8rem;
            border-radius: 8px;
            border-left: 4px solid #ffc107;
        }

        .replay-sentence-btn {
            position: relative;
            display: flex;
            align-items: center;
            gap: 0.3rem;
        }

        .replay-count {
            font-size: 0.7rem;
            background: rgba(255, 152, 56, 0.2);
            padding: 0.2rem 0.4rem;
            border-radius: 10px;
            color: var(--primary-color);
            font-weight: bold;
        }

        .dictation-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2rem;
            padding: 1rem;
            background: var(--bg-light);
            border-radius: 10px;
        }

        .completion-summary {
            font-size: 1rem;
            color: var(--text-dark);
            font-weight: 500;
        }

        .btn-primary:disabled {
            background: #6c757d;
            cursor: not-allowed;
            opacity: 0.6;
        }

            .btn-primary:disabled:hover {
                transform: none;
                box-shadow: none;
            }

        .dictation-check-actions {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
            margin-top: 1rem;
        }
        .dictation-check-actions .btn-primary,
        .dictation-check-actions .btn-secondary {
            min-width: 110px;
            height: 44px;
            font-size: 1rem;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Shadowing popup: chỉnh nút Play Sentence giống Record */
        #shadowingModal .btn-primary, #shadowingModal .btn-secondary {
            min-width: 130px;
            height: 44px;
            font-size: 1rem;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 0;
        }
        #shadowingModal #playShadowingAudio {
            background: var(--primary-color);
            color: #fff;
            border: none;
            margin-bottom: 0;
        }
        #shadowingModal #playShadowingAudio i {
            margin-right: 8px;
        }
        #shadowingModal #startRecordBtn i,
        #shadowingModal #playShadowingAudio i {
            margin-right: 8px;
        }

        .dictation-actions .btn-secondary#prevSentenceBtn,
        .dictation-actions .btn-primary#nextSentenceBtn {
            min-width: 110px;
            height: 44px;
            font-size: 1rem;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
    </style>

    @section Scripts {
        <script>
            // === AUDIO PLAYER INIT (fixed) ===
            let audioPlayer;
            let playPauseBtn;
            let progressBar;
            let currentTimeSpan;
            let durationSpan;

            document.addEventListener('DOMContentLoaded', function() {
                audioPlayer = document.getElementById('listeningAudio');
                playPauseBtn = document.getElementById('playPauseBtn');
                progressBar = document.getElementById('audioProgressBar');
                currentTimeSpan = document.getElementById('currentTime');
                durationSpan = document.getElementById('duration');

                // Audio control buttons events
                document.getElementById('backwardBtn').addEventListener('click', function() {
                    if(audioPlayer) audioPlayer.currentTime = Math.max(0, audioPlayer.currentTime - 10);
                });
                document.getElementById('forwardBtn').addEventListener('click', function() {
                    if(audioPlayer) audioPlayer.currentTime = Math.min(audioPlayer.duration, audioPlayer.currentTime + 10);
                });
                playPauseBtn.addEventListener('click', togglePlay);

                // Audio event listeners
                audioPlayer.addEventListener('play', updatePlayButton);
                audioPlayer.addEventListener('pause', updatePlayButton);
                audioPlayer.addEventListener('timeupdate', updateProgress);
                audioPlayer.addEventListener('loadedmetadata', () => {
                    durationSpan.textContent = formatTime(audioPlayer.duration);
                });
                audioPlayer.style.display = 'none';

                document.getElementById('audioProgress').addEventListener('click', function(e) {
                    const percent = e.offsetX / this.offsetWidth;
                    audioPlayer.currentTime = percent * audioPlayer.duration;
                });

                loadListeningAudio();
                prepareFillBlank();
            });

                       async function loadListeningAudio() {
                try {
                    let audioDataRaw = @Html.Raw(JsonConvert.SerializeObject(ViewBag.AudioData ?? ""));
                    let audioData = audioDataRaw;

                    if (audioData.startsWith("data:audio")) {
                        audioData = audioData.split(',')[1];
                    }

                    if (!audioData || audioData.length < 30) {
                        throw new Error('Audio data is not available or too short');
                    }

                    const byteCharacters = atob(audioData);
                    const byteNumbers = new Array(byteCharacters.length);
                    for (let i = 0; i < byteCharacters.length; i++) {
                        byteNumbers[i] = byteCharacters.charCodeAt(i);
                    }

                    const byteArray = new Uint8Array(byteNumbers);
                    const blob = new Blob([byteArray], { type: 'audio/mp3' });
                    const audioUrl = URL.createObjectURL(blob);

                    audioPlayer.src = audioUrl;
                    audioPlayer.load();
                    audioPlayer.style.display = 'none';

                    audioPlayer.onload = () => {
                        URL.revokeObjectURL(audioUrl);
                    };
                } catch (error) {
                    audioPlayer.style.display = 'none';
                    console.error('Error loading audio:', error);
                }
            }

            function togglePlay() {
                if (audioPlayer.paused) {
                    audioPlayer.play();
                } else {
                    audioPlayer.pause();
                }
            }
            function updatePlayButton() {
                playPauseBtn.innerHTML = audioPlayer.paused ?
                    '<i class="fas fa-play"></i>' :
                    '<i class="fas fa-pause"></i>';
            }
            function updateProgress() {
                if (!audioPlayer.duration) return;
                const percent = (audioPlayer.currentTime / audioPlayer.duration) * 100;
                progressBar.style.width = percent + '%';
                currentTimeSpan.textContent = formatTime(audioPlayer.currentTime);
            }
            function formatTime(seconds) {
                const minutes = Math.floor(seconds / 60);
                seconds = Math.floor(seconds % 60);
                return `${minutes}:${seconds.toString().padStart(2, '0')}`;
            }

            // === FILL THE BLANK LOGIC ===
            // Get sentences array from server-side (fix for JS array)
            let sentences = [];
            try {
                sentences = @Html.Raw(JsonConvert.SerializeObject(ViewBag.Sentences ?? new List<string>()));
            } catch(e) {
                sentences = [];
            }
            const totalParts = 3;
            const partSize = Math.ceil(sentences.length / totalParts);
            const sentenceParts = [];
            for (let i = 0; i < totalParts; i++) {
                sentenceParts.push(sentences.slice(i * partSize, (i + 1) * partSize));
            }
            let currentPart = 0;

            function prepareFillBlank() {
                renderFillBlankPart(currentPart);

                document.getElementById('prevPartBtn').onclick = function() {
                    if (currentPart > 0) {
                        currentPart--;
                        renderFillBlankPart(currentPart);
                    }
                };
                document.getElementById('nextPartBtn').onclick = function() {
                    if (currentPart < totalParts - 1) {
                        currentPart++;
                        renderFillBlankPart(currentPart);
                    }
                };
                document.getElementById('submitFillBlankBtn').onclick = checkFillBlank;
                document.getElementById('showFillBlankAnswerBtn').onclick = showFillBlankAnswer;
            }

            function renderFillBlankPart(partIdx) {
                document.getElementById('partNumber').textContent = partIdx + 1;
                const partSentences = sentenceParts[partIdx];
                generateFillBlankForPart(partSentences, partIdx);

                // Hiện/ẩn nút chuyển phần
                document.getElementById('prevPartBtn').style.display = partIdx > 0 ? 'inline-block' : 'none';
                document.getElementById('nextPartBtn').style.display = partIdx < totalParts - 1 ? 'inline-block' : 'none';
                // Reset trạng thái feedback và show answers khi chuyển part
                document.getElementById('fillBlankFeedback').innerHTML = "";
                document.getElementById('showFillBlankAnswerBtn').style.display = "none";
            }

            function generateFillBlankForPart(partSentences, partIdx) {
                const container = document.getElementById('fillTheBlankContainer');
                let html = '';
                const hideWordCount = 2;
                window.fillBlankCorrect = [];
                partSentences.forEach((sentence, idx) => {
                    const words = sentence.trim().split(/\s+/);
                    let hideIndexes = [];
                    if (words.length <= hideWordCount) {
                        for (let i = 0; i < Math.min(1, words.length); i++) hideIndexes.push(i);
                    } else {
                        while (hideIndexes.length < hideWordCount) {
                            let rand = Math.floor(Math.random() * words.length);
                            if (!hideIndexes.includes(rand)) hideIndexes.push(rand);
                        }
                    }
                    window.fillBlankCorrect[idx] = words;
                    html += `<div class="fill-blank-item" data-index="${idx}" style="margin-bottom: 1.5rem;">`;
                    html += `<span class="sentence-number">${idx + 1}.</span> `;
                    words.forEach((w, i) => {
                        if (hideIndexes.includes(i)) {
                            html += `<input type="text" class="fill-blank-input" data-word-index="${i}" style="width:90px;margin:0 6px;padding:4px 6px;" autocomplete="off"/>`;
                        } else {
                            html += `<span class="fill-blank-word" style="margin:0 6px;">${w}</span>`;
                        }
                    });
                    html += `</div>`;
                });
                container.innerHTML = html;
            }

            function checkFillBlank() {
                const items = document.querySelectorAll('.fill-blank-item');
                let allCorrect = true, total = 0, corrects = 0;
                items.forEach((item, idx) => {
                    const correctWords = window.fillBlankCorrect[idx];
                    const inputs = item.querySelectorAll('.fill-blank-input');
                    inputs.forEach(input => {
                        const wordIdx = parseInt(input.dataset.wordIndex);
                        const user = input.value.trim();
                        total++;
                        if (user.toLowerCase() === correctWords[wordIdx].toLowerCase()) {
                            input.style.background = "#d4edda";
                            input.style.color = "#155724";
                            input.style.borderColor = "#28a745";
                            corrects++;
                        } else {
                            input.style.background = "#fff3cd";
                            input.style.color = "#856404";
                            input.style.borderColor = "#ffc107";
                            allCorrect = false;
                        }
                        input.disabled = true;
                    });
                });
                document.getElementById('fillBlankFeedback').innerHTML = `<div>${corrects}/${total} correct</div>`;
                document.getElementById('showFillBlankAnswerBtn').style.display = 'inline-block';
            }

            function showFillBlankAnswer() {
                const items = document.querySelectorAll('.fill-blank-item');
                items.forEach((item, idx) => {
                    const correctWords = window.fillBlankCorrect[idx];
                    const inputs = item.querySelectorAll('.fill-blank-input');
                    inputs.forEach(input => {
                        const wordIdx = parseInt(input.dataset.wordIndex);
                        if (input.value.trim().toLowerCase() !== correctWords[wordIdx].toLowerCase()) {
                            input.value = correctWords[wordIdx];
                            input.style.background = "#cce5ff";
                            input.style.color = "#004085";
                            input.style.borderColor = "#17a2b8";
                        }
                    });
                });
            }
        </script>
    }
