@model EXE_FAIEnglishTutor.Controllers.Lesson.LessonViewModel
@{
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
    ViewData["Title"] = $"Step 3 - {Model.Lesson.Title}";
}

<div id="content" class="p-4 p-md-5 home">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <button type="button" id="sidebarCollapse" class="btn btn-sidebar-custom">
                <i class="fa fa-bars"></i>
                <span class="sr-only">Toggle Menu</span>
            </button>
            <button class="btn btn-dark d-inline-block d-lg-none ml-auto" type="button" data-toggle="collapse"
                    data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                    aria-label="Toggle navigation">
                <i class="fa fa-bars"></i>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="nav navbar-nav ml-auto">
                    @if (User.Identity.IsAuthenticated)
                    {
                        var fullName = User.Identity.Name;
                        var avatarUrl = User.FindFirst("Avatar")?.Value;
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle nav-link-avatar" href="#" id="avatarDropdown" role="button"
                               data-toggle="dropdown" aria-expanded="false">
                                <div class="nav-img">
                                    <img src="@avatarUrl" alt="Avatar" class="img-fluid" style="border-radius: 50%;">
                                </div>
                            </a>
                            <div class="menu-items dropdown-menu dropdown-menu-right" aria-labelledby="avatarDropdown">
                                <div class="menu-title">
                                    <h6 class="dropdown-header">Hello, <span>@fullName</span></h6>
                                </div>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" asp-area="Mentee" asp-controller="Profile" asp-action="index">
                                    <i class="bi bi-person-circle"></i> View Profile
                                </a>
                                <div class="dropdown-divider"></div>
                                <a id="logout-link" class="dropdown-item text-danger" href="#">
                                    <i class="bi bi-box-arrow-right"></i> <span id="logoutOption">Logout</span>
                                </a>
                                <form id="logoutForm" asp-controller="Account" asp-action="Logout" method="post" style="display: none;"></form>
                            </div>
                        </li>
                    }
                    else
                    {
                        <a class="btn-login-custom btn" asp-controller="Account" asp-action="Login">Đăng nhập</a>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <div class="p-4 p-md-5">
        <!-- Progress Bar -->
        <div class="lesson-progress">
            <div class="progress-container">
                <div class="progress-bar">
                    <div class="progress-fill"></div>
                </div>
                <div class="progress-steps">
                    <div class="step active">
                        <div class="step-number">1</div>
                        <div class="step-label">Pronunciation</div>
                    </div>
                    <div class="step active">
                        <div class="step-number">2</div>
                        <div class="step-label">First Listening </div>
                    </div>
                    <div class="step active">
                        <div class="step-number">3</div>
                        <div class="step-label">Second Listening </div>
                    </div>
                    <div class="step">
                        <div class="step-number">4</div>
                        <div class="step-label">Check Understanding </div>
                    </div>
                    <div class="step">
                        <div class="step-number">5</div>
                        <div class="step-label">Speaking Practice </div>
                    </div>
                    <div class="step">
                        <div class="step-number">6</div>
                        <div class="step-label">Shadowing </div>
                    </div>
                    <div class="step">
                        <div class="step-number">7</div>
                        <div class="step-label">Review & Practice</div>
                    </div>
                </div>
            </div>
            <div class="listening-container">
                <!-- Lesson Header -->
                <div class="lesson-header">
                    <h2 class="lesson-title">@Model.Lesson.Title</h2>
                    <div class="situation-box">
                        <i class="fas fa-quote-left"></i>
                        <p>@Model.Lesson.Situation</p>
                    </div>
                </div>

                <!-- Audio Player Section -->
                <div class="audio-player-container">
                    <audio id="listeningAudio" class="custom-audio-player audio-progress audio-progress-bar" controls style="display: none;"></audio>
                    <div class="audio-controls">
                        <button id="playPauseBtn" class="control-btn pulse">
                            <i class="fas fa-play"></i>
                        </button>
                        <div class="progress-container">
                            <div id="audioProgress" class="audio-progress">
                                <div id="audioProgressBar" class="audio-progress-bar"></div>
                            </div>
                            <div class="time-display">
                                <span id="currentTime">0:00</span> / <span id="duration">0:00</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Transcript Controls -->
                <div class="transcript-controls">
                    <button id="toggleTranscript" class="btn btn-primary">
                        <i class="fas fa-closed-captioning"></i> Toggle Transcript
                    </button>
                    <button id="toggleLineByLine" class="btn btn-primary">
                        <i class="fas fa-list"></i> Line by Line Mode
                    </button>
                    <button id="highlightMode" class="btn btn-primary">
                        <i class="fas fa-highlighter"></i> Highlight Mode
                    </button>
                </div>

                <!-- Transcript Section -->
                <div id="transcriptContainer" class="transcript-container" style="display: none;">
                    <div id="fullTranscript" class="full-transcript">
                        @Model.Script
                    </div>
                    <div id="lineByLineTranscript" class="line-by-line-transcript" style="display: none;">
                        @foreach (var sentence in Model.Script.Split("."))
                        {
                            <p class="transcript-line" data-start-time="0">@sentence</p>
                        }
                    </div>
                </div>

                <div class="bottom-navigation">
                    <a href="@Url.Action("Step2", "Lesson", new { id = Model.Lesson.LessonId })" class="nav-btn prev">
                        <i class="fas fa-arrow-left"></i> Previous
                    </a>
                    <a href="@Url.Action("Step4", "Lesson", new { id = Model.Lesson.LessonId })" class="nav-btn next">
                        Next <i class="fas fa-arrow-right"></i>
                    </a>
                </div>

            </div>
     </div>
</div>
    <style>
        .audio-player-container {
            width: 70%;
            margin: 0 auto;
            padding: 1rem;
            background: rgba(255, 152, 56, 0.1);
            border-radius: 15px;
            transition: all 0.3s ease;
        }

            .audio-player-container:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(255, 152, 56, 0.2);
            }

        .audio-controls {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            padding: 1rem;
        }

        .control-btn {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: none;
            background: #ff9838;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

            .control-btn.pulse::before {
                content: '';
                position: absolute;
                width: 100%;
                height: 100%;
                border-radius: 50%;
                background: rgba(255, 152, 56, 0.4);
                animation: pulse 2s infinite;
            }

        @@keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 0.8;
            }

            70% {
                transform: scale(1.3);
                opacity: 0;
            }

            100% {
                transform: scale(1);
                opacity: 0;
            }
        }

        .progress-container {
            flex: 1;
            margin-right: 1rem;
        }

        .audio-progress {
            height: 8px;
            background: rgba(255, 152, 56, 0.2);
            border-radius: 4px;
            cursor: pointer;
            margin-bottom: 0.5rem;
            overflow: hidden;
        }

        .audio-progress-bar {
            height: 100%;
            background: #ff9838;
            border-radius: 4px;
            transition: width 0.1s linear;
            position: relative;
        }

            .audio-progress-bar::after {
                content: '';
                position: absolute;
                right: -2px;
                top: 50%;
                transform: translateY(-50%);
                width: 12px;
                height: 12px;
                background: #ff9838;
                border-radius: 50%;
                box-shadow: 0 0 5px rgba(0,0,0,0.2);
            }

        .time-display {
            color: #ff9838;
            font-weight: 500;
            font-size: 0.9rem;
        }
        /* Progress Bar Styles */
        .lesson-progress {
            max-width: 800px;
            margin: 0 auto 2rem;
        }

        .progress-container {
            position: relative;
            padding: 20px 0;
        }

        .progress-bar {
            width: 100%;
            height: 4px;
            background: #e0e0e0;
            border-radius: 2px;
            position: absolute;
            top: 50px;
            z-index: 1;
        }

        .progress-fill {
            width: 14.28%; /* 1/7 of the total width */
            height: 100%;
            background: linear-gradient(90deg, #ff9838 0%, #ffb347 100%);
            border-radius: 2px;
            transition: width 0.5s ease;
            position: relative;
        }

        .progress-steps {
            display: flex;
            justify-content: space-between;
            position: relative;
            z-index: 2;
        }

        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            color: #999;
            position: relative;
        }

            .step.active {
                color: #ff9838;
            }

                .step.active .step-number {
                    background: #ff9838;
                    color: white;
                }

        .step-number {
            width: 30px;
            height: 30px;
            background: #e0e0e0;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-bottom: 8px;
            transition: all 0.3s ease;
        }

        .step-label {
            font-size: 0.85rem;
            font-weight: 500;
            text-align: center;
            white-space: nowrap;
        }

        :root {
            --primary-color: #ff9838;
            --primary-dark: #ff8108;
            --primary-light: #ffb347;
            --text-dark: #2c3e50;
            --text-light: #7f8c8d;
            --bg-light: #f8f9fa;
            --white: #ffffff;
        }

        .listening-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
        }

        .lesson-header {
            text-align: center;
            margin-bottom: 2.5rem;
        }

        .lesson-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        .situation-box {
            background: var(--bg-light);
            border-radius: 10px;
            padding: 1.5rem;
            margin: 1rem auto;
            border-left: 4px solid var(--primary-color);
        }

        .audio-section {
            background: var(--white);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            margin: 2rem 0;
        }

        .audio-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-top: 1rem;
        }

        .control-btn {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            border: none;
            background: var(--primary-color);
            color: var(--white);
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .control-btn:hover {
                background: var(--primary-dark);
                transform: scale(1.05);
            }

        .audio-progress {
            flex: 1;
            height: 6px;
            background: var(--bg-light);
            border-radius: 3px;
            cursor: pointer;
        }

        .audio-progress-bar {
            height: 100%;
            background: var(--primary-color);
            border-radius: 3px;
            transition: width 0.1s linear;
        }

        .question-card {
            background: var(--white);
            border-radius: 10px;
            padding: 1.5rem;
            margin: 1rem 0;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .option {
            margin: 0.8rem 0;
            padding: 0.8rem;
            border-radius: 8px;
            background: var(--bg-light);
            transition: all 0.3s ease;
        }

            .option:hover {
                background: #fff1e6;
            }

        .btn-primary {
            background: var(--primary-color);
            color: var(--white);
            border: none;
            padding: 0.8rem 2rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .btn-primary:hover {
                background: var(--primary-dark);
                transform: translateY(-2px);
            }

        .score-summary {
            background: var(--bg-light);
            border-radius: 12px;
            padding: 1.5rem;
            text-align: center;
            margin-top: 2rem;
        }

        .bottom-navigation {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
        }

        .nav-btn {
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            text-decoration: none;
            transition: all 0.3s ease;
        }

            .nav-btn.prev {
                background: var(--bg-light);
                color: var(--text-dark);
            }

            .nav-btn.next {
                background: var(--primary-color);
                color: var(--white);
            }

            .nav-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            }

        .transcript-controls {
            margin: 2rem 0;
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        .transcript-container {
            background: var(--bg-light);
            border-radius: 12px;
            padding: 2rem;
            margin: 2rem 0;
            max-height: 400px;
            overflow-y: auto;
        }

        .full-transcript {
            line-height: 1.6;
            white-space: pre-wrap;
        }

        .line-by-line-transcript .transcript-line {
            padding: 0.5rem;
            margin: 0.5rem 0;
            border-radius: 8px;
            background: var(--white);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .line-by-line-transcript .transcript-line:hover {
            background: #fff1e6;
        }

        .line-by-line-transcript .transcript-line.active {
            background: var(--primary-light);
            color: var(--white);
        }

        .highlighted {
            background-color: #ffeb3b;
            padding: 0 2px;
            border-radius: 3px;
        }

        .highlight-mode {
            cursor: pointer;
        }
    </style>

    @section Scripts {
        <script>
            let audioPlayer;
            let playPauseBtn;
            let progressBar;
            let currentTimeSpan;
            let durationSpan;
            let isHighlightMode = false;

            document.addEventListener('DOMContentLoaded', function() {
                initializeAudio();
                loadListeningAudio();
                initializeTranscriptControls();
            });

            function initializeAudio() {
                audioPlayer = document.getElementById('listeningAudio');
                playPauseBtn = document.getElementById('playPauseBtn');
                progressBar = document.getElementById('audioProgressBar');
                currentTimeSpan = document.getElementById('currentTime');
                durationSpan = document.getElementById('duration');

                // Play/Pause button
                playPauseBtn.addEventListener('click', togglePlay);

                // Audio event listeners
                audioPlayer.addEventListener('play', updatePlayButton);
                audioPlayer.addEventListener('pause', updatePlayButton);
                audioPlayer.addEventListener('timeupdate', updateProgress);
                audioPlayer.addEventListener('loadedmetadata', () => {
                    durationSpan.textContent = formatTime(audioPlayer.duration);
                });
                audioPlayer.addEventListener('ended', () => {
                    ;
                });

                // Progress bar click
                document.getElementById('audioProgress').addEventListener('click', function(e) {
                    const percent = e.offsetX / this.offsetWidth;
                    audioPlayer.currentTime = percent * audioPlayer.duration;
                });
            }

            async function loadListeningAudio() {
                try {
                    const audioData = @Html.Raw(Json.Serialize(Model.AudioData));
                    if (!audioData) {
                        throw new Error('Audio data is not available');
                    }

                    // Convert Base64 to Blob
                    const base64Data = audioData.split(',')[1];
                    const byteCharacters = atob(base64Data);
                    const byteNumbers = new Array(byteCharacters.length);

                    for (let i = 0; i < byteCharacters.length; i++) {
                        byteNumbers[i] = byteCharacters.charCodeAt(i);
                    }

                    const byteArray = new Uint8Array(byteNumbers);
                    const blob = new Blob([byteArray], { type: 'audio/mp3' });
                    const audioUrl = URL.createObjectURL(blob);

                    audioPlayer.src = audioUrl;
                    audioPlayer.load();

                    // Show audio controls after loading
                    audioPlayer.style.display = 'none'; // Keep the native audio element hidden
                    document.querySelector('.audio-controls').style.display = 'flex';

                    // Clean up the URL when the audio is loaded
                    audioPlayer.onload = () => {
                        URL.revokeObjectURL(audioUrl);
                    };

                } catch (error) {
                    console.error('Error loading audio:', error);
                    alert('Error loading the audio. Please try again.');
                }
            }

            function togglePlay() {
                if (audioPlayer.paused) {
                    audioPlayer.play();
                } else {
                    audioPlayer.pause();
                }
            }

            function updatePlayButton() {
                playPauseBtn.innerHTML = audioPlayer.paused ?
                    '<i class="fas fa-play"></i>' :
                    '<i class="fas fa-pause"></i>';
            }

            function updateProgress() {
                const percent = (audioPlayer.currentTime / audioPlayer.duration) * 100;
                progressBar.style.width = percent + '%';
                currentTimeSpan.textContent = formatTime(audioPlayer.currentTime);
            }

            function formatTime(seconds) {
                const minutes = Math.floor(seconds / 60);
                seconds = Math.floor(seconds % 60);
                return `${minutes}:${seconds.toString().padStart(2, '0')}`;
            }

            function initializeTranscriptControls() {
                const toggleTranscriptBtn = document.getElementById('toggleTranscript');
                const toggleLineByLineBtn = document.getElementById('toggleLineByLine');
                const highlightModeBtn = document.getElementById('highlightMode');
                const transcriptContainer = document.getElementById('transcriptContainer');
                const fullTranscript = document.getElementById('fullTranscript');
                const lineByLineTranscript = document.getElementById('lineByLineTranscript');

                // Toggle transcript visibility
                toggleTranscriptBtn.addEventListener('click', () => {
                    transcriptContainer.style.display = transcriptContainer.style.display === 'none' ? 'block' : 'none';
                });

                // Toggle between full and line-by-line modes
                toggleLineByLineBtn.addEventListener('click', () => {
                    fullTranscript.style.display = fullTranscript.style.display === 'none' ? 'block' : 'none';
                    lineByLineTranscript.style.display = lineByLineTranscript.style.display === 'none' ? 'block' : 'none';
                });

                // Highlight mode
                highlightModeBtn.addEventListener('click', () => {
                    isHighlightMode = !isHighlightMode;
                    document.body.classList.toggle('highlight-mode', isHighlightMode);
                    highlightModeBtn.classList.toggle('active', isHighlightMode);
                });

                // Line-by-line transcript interaction
                const transcriptLines = document.querySelectorAll('.transcript-line');
                transcriptLines.forEach(line => {
                    line.addEventListener('click', () => {
                        if (isHighlightMode) {
                            const selection = window.getSelection();
                            const range = selection.getRangeAt(0);
                            const span = document.createElement('span');
                            span.className = 'highlighted';
                            range.surroundContents(span);
                        } else {
                            // Remove active class from all lines
                            transcriptLines.forEach(l => l.classList.remove('active'));
                            // Add active class to clicked line
                            line.classList.add('active');
                            // Play the corresponding audio segment
                            const startTime = parseFloat(line.dataset.startTime);
                            audioPlayer.currentTime = startTime;
                            audioPlayer.play();
                        }
                    });
                });
            }
        </script>
    }
