@using Newtonsoft.Json
@model EXE_FAIEnglishTutor.Controllers.Lesson.LessonViewModel
@{
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
    ViewData["Title"] = $"Step 6 - {Model.Lesson.Title}";
}

<div id="content" class="p-4 p-md-5 home">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <button type="button" id="sidebarCollapse" class="btn btn-sidebar-custom">
                <i class="fa fa-bars"></i>
                <span class="sr-only">Toggle Menu</span>
            </button>
            <button class="btn btn-dark d-inline-block d-lg-none ml-auto" type="button" data-toggle="collapse"
                    data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                    aria-label="Toggle navigation">
                <i class="fa fa-bars"></i>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="nav navbar-nav ml-auto">
                    @if (User.Identity.IsAuthenticated)
                    {
                        var fullName = User.Identity.Name;
                        var avatarUrl = User.FindFirst("Avatar")?.Value;
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle nav-link-avatar" href="#" id="avatarDropdown" role="button"
                               data-toggle="dropdown" aria-expanded="false">
                                <div class="nav-img">
                                    <img src="@avatarUrl" alt="Avatar" class="img-fluid" style="border-radius: 50%;">
                                </div>
                            </a>
                            <div class="menu-items dropdown-menu dropdown-menu-right" aria-labelledby="avatarDropdown">
                                <div class="menu-title">
                                    <h6 class="dropdown-header">Hello, <span>@fullName</span></h6>
                                </div>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" asp-area="Mentee" asp-controller="Profile" asp-action="index">
                                    <i class="bi bi-person-circle"></i> View Profile
                                </a>
                                <div class="dropdown-divider"></div>
                                <a id="logout-link" class="dropdown-item text-danger" href="#">
                                    <i class="bi bi-box-arrow-right"></i> <span id="logoutOption">Logout</span>
                                </a>
                                <form id="logoutForm" asp-controller="Account" asp-action="Logout" method="post" style="display: none;"></form>
                            </div>
                        </li>
                    }
                    else
                    {
                        <a class="btn-login-custom btn" asp-controller="Account" asp-action="Login">Đăng nhập</a>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <div class="p-4 p-md-5">
        <!-- Progress Bar -->
        <div class="lesson-progress">
            <div class="progress-container">
                <div class="progress-bar">
                    <div class="progress-fill"></div>
                </div>
                <div class="progress-steps">
                    <div class="step active">
                        <div class="step-number">1</div>
                        <div class="step-label">Pronunciation</div>
                    </div>
                    <div class="step active">
                        <div class="step-number">2</div>
                        <div class="step-label">First Listening </div>
                    </div>
                    <div class="step active">
                        <div class="step-number">3</div>
                        <div class="step-label">Second Listening </div>
                    </div>
                    <div class="step active">
                        <div class="step-number">4</div>
                        <div class="step-label">Check Understanding </div>
                    </div>
                    <div class="step active">
                        <div class="step-number">5</div>
                        <div class="step-label">Speaking Practice </div>
                    </div>
                    <div class="step active">
                        <div class="step-number">6</div>
                        <div class="step-label">Shadowing </div>
                    </div>
                    <div class="step">
                        <div class="step-number">7</div>
                        <div class="step-label">Review & Practice</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Shadowing Practice Container -->
        <div class="shadowing-container">
            <div class="lesson-header">
                <h2 class="lesson-title">@Model.Lesson.Title</h2>
                <p class="lesson-subtitle">Practice speaking along with the audio to improve your pronunciation and rhythm</p>
            </div>

            <!-- Speed Control -->
            <div class="speed-control">
                <button class="speed-btn @(ViewBag.Speed == 0.9 ? "active" : "")" data-speed="0.9">
                    <i class="fas fa-walking"></i> Slower (90%)
                </button>
                <button class="speed-btn @(ViewBag.Speed == 1.0 ? "active" : "")" data-speed="1.0">
                    <i class="fas fa-running"></i> Normal Speed
                </button>
            </div>

            <!-- Audio Player -->
            <div class="audio-player">
                <div class="audio-controls">
                    <button id="playPauseBtn" class="control-btn">
                        <i class="fas fa-play"></i>
                    </button>
                    <button id="rewindBtn" class="control-btn">
                        <i class="fas fa-backward"></i> 5s
                    </button>
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div class="progress-fill"></div>
                        </div>
                        <div class="time-display">
                            <span id="currentTime">0:00</span> / <span id="duration">0:00</span>
                        </div>
                    </div>
                    <audio id="audioPlayer" src="@Model.AudioData"></audio>
                </div>
            </div>

            <!-- Karaoke Display -->
            <div class="karaoke-display">
                <div class="text-display">
                    @foreach (var sentence in Model.Sentences)
                    {
                        <div class="sentence" data-start="0" data-end="0">
                            @foreach (var word in sentence.Split(' '))
                            {
                                <span class="word">@word</span>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Recording Controls -->
            <div class="recording-controls">
                <button id="recordBtn" class="record-btn">
                    <i class="fas fa-microphone"></i>
                    <span>Start Recording</span>
                </button>
            </div>

            <!-- Score Display -->
            <div id="scoreDisplay" class="score-display" style="display: none;">
                <div class="score-container">
                    <div class="score-circle">
                        <div class="score-label">Pronunciation</div>
                        <div class="score pronunciation-score">-</div>
                    </div>
                    <div class="score-circle">
                        <div class="score-label">Timing</div>
                        <div class="score timing-score">-</div>
                    </div>
                    <div class="score-circle">
                        <div class="score-label">Fluency</div>
                        <div class="score fluency-score">-</div>
                    </div>
                </div>
            </div>

            <!-- Navigation -->
            <div class="bottom-navigation">
                <form id="prevStepForm" method="post" action="@Url.Action("Step5Pre", "Lesson")" style="display: inline;">
                    <input type="hidden" name="id" value="@Model.Lesson.LessonId" />
                    <input type="hidden" name="script" value="@Model.Script" />
                    <input type="hidden" name="audioData" value="@Model.AudioData" />
                    <input type="hidden" name="questions" value="@JsonConvert.SerializeObject(Model.Questions ?? new List<IeltsQuestion>())" />
                    <button type="submit" class="nav-btn prev">
                        <i class="fas fa-arrow-left"></i> Previous
                    </button>
                </form>
                <form id="nextStepForm" method="post" action="@Url.Action("Step7", "Lesson")" style="display: inline;">
                    <input type="hidden" name="id" value="@Model.Lesson.LessonId" />
                    <input type="hidden" name="script" value="@Model.Script" />
                    <input type="hidden" name="audioData" value="@Model.AudioData" />
                    <input type="hidden" name="questions" value="@JsonConvert.SerializeObject(Model.Questions ?? new List<IeltsQuestion>())" />
                    <button type="submit" class="nav-btn next">
                        Next <i class="fas fa-arrow-right"></i>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary-color: #ff9838;
        --primary-dark: #ff8108;
        --primary-light: #ffb347;
        --text-dark: #2c3e50;
        --text-light: #7f8c8d;
        --bg-light: #f8f9fa;
        --white: #ffffff;
    }

    /* Progress Bar Styles */
    .lesson-progress {
        max-width: 800px;
        margin: 0 auto 2rem;
    }

    .progress-container {
        position: relative;
        padding: 20px 0;
    }

    .progress-bar {
        width: 100%;
        height: 4px;
        background: #e0e0e0;
        border-radius: 2px;
        position: absolute;
        top: 50px;
        z-index: 1;
    }

    .progress-fill {
        width: 85.71%;
        height: 100%;
        background: linear-gradient(90deg, #ff9838 0%, #ffb347 100%);
        border-radius: 2px;
        transition: width 0.5s ease;
        position: relative;
    }

    .progress-steps {
        display: flex;
        justify-content: space-between;
        position: relative;
        z-index: 2;
    }

    .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: #999;
        position: relative;
    }

    .step.active {
        color: #ff9838;
    }

    .step.active .step-number {
        background: #ff9838;
        color: white;
    }

    .step-number {
        width: 30px;
        height: 30px;
        background: #e0e0e0;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        margin-bottom: 8px;
        transition: all 0.3s ease;
    }

    .step-label {
        font-size: 0.85rem;
        font-weight: 500;
        text-align: center;
        white-space: nowrap;
    }

    /* Shadowing Container */
    .shadowing-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 2rem;
    }

    .lesson-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .lesson-title {
        font-size: 2.2rem;
        color: var(--primary-color);
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .lesson-subtitle {
        color: var(--text-light);
        font-size: 1.1rem;
    }

    /* Speed Control */
    .speed-control {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .speed-btn {
        padding: 0.8rem 1.5rem;
        border: 2px solid var(--primary-color);
        border-radius: 12px;
        background: transparent;
        color: var(--primary-color);
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .speed-btn:hover, .speed-btn.active {
        background: var(--primary-color);
        color: white;
    }

    /* Audio Player */
    .audio-player {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 4px 15px rgba(255, 152, 56, 0.1);
        margin-bottom: 2rem;
    }

    .audio-controls {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .control-btn {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        border: none;
        background: var(--primary-color);
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .control-btn:hover {
        background: var(--primary-dark);
        transform: scale(1.05);
    }

    .progress-container {
        flex-grow: 1;
        margin: 0 1rem;
    }

    .progress-bar {
        height: 6px;
        background: #f0f0f0;
        border-radius: 3px;
        position: relative;
        cursor: pointer;
    }

    .progress-fill {
        height: 100%;
        background: var(--primary-color);
        border-radius: 3px;
        width: 0;
        transition: width 0.1s linear;
    }

    .time-display {
        text-align: center;
        margin-top: 0.5rem;
        color: var(--text-light);
        font-size: 0.9rem;
    }

    /* Karaoke Display */
    .karaoke-display {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        margin: 2rem 0;
        box-shadow: 0 4px 15px rgba(255, 152, 56, 0.1);
    }

    .text-display {
        font-size: 1.8rem;
        line-height: 1.6;
        color: var(--text-dark);
    }

    .sentence {
        margin-bottom: 1.5rem;
        opacity: 0.5;
        transition: opacity 0.3s ease;
    }

    .sentence.active {
        opacity: 1;
    }

    .word {
        display: inline-block;
        margin: 0 0.2rem;
        padding: 0.2rem 0.4rem;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

    .word.highlight {
        background: var(--primary-light);
        color: white;
    }

    /* Recording Controls */
    .recording-controls {
        text-align: center;
        margin: 2rem 0;
    }

    .record-btn {
        padding: 1rem 2rem;
        border-radius: 30px;
        border: none;
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);
        color: white;
        font-size: 1.1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.8rem;
    }

    .record-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(255, 152, 56, 0.2);
    }

    .record-btn.recording {
        background: linear-gradient(135deg, #ff4d4d 0%, #ff6b6b 100%);
        animation: pulse 1.5s infinite;
    }

    /* Score Display */
    .score-display {
        margin-top: 2rem;
    }

    .score-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1.5rem;
    }

    .score-circle {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: 0 4px 15px rgba(255, 152, 56, 0.1);
        transition: transform 0.3s ease;
    }

    .score-circle:hover {
        transform: translateY(-3px);
    }

    .score-label {
        color: var(--text-light);
        margin-bottom: 0.8rem;
        font-weight: 500;
    }

    .score {
        font-size: 2rem;
        font-weight: bold;
        color: var(--primary-color);
    }

    /* Navigation */
    .bottom-navigation {
        display: flex;
        justify-content: center;
        gap: 2rem;
        margin-top: 3rem;
    }

    .nav-btn {
        padding: 0.8rem 1.5rem;
        border-radius: 12px;
        border: none;
        background: var(--primary-color);
        color: white;
        font-weight: 500;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .nav-btn:hover {
        background: var(--primary-dark);
        transform: translateY(-2px);
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.05);
        }
        100% {
            transform: scale(1);
        }
    }
</style>

@section Scripts {
    <script>
        let audioPlayer;
        let mediaRecorder;
        let audioChunks = [];
        let isRecording = false;
        let currentSpeed = 1.0;
        let wordTimings = [];

        document.addEventListener('DOMContentLoaded', function() {
            audioPlayer = document.getElementById('audioPlayer');
            setupAudioPlayer();
            setupSpeedControls();
            setupRecording();
            generateWordTimings();
        });

        function setupAudioPlayer() {
            const playPauseBtn = document.getElementById('playPauseBtn');
            const rewindBtn = document.getElementById('rewindBtn');
            const progressBar = document.querySelector('.progress-bar');
            const progressFill = document.querySelector('.progress-fill');
            const currentTimeDisplay = document.getElementById('currentTime');
            const durationDisplay = document.getElementById('duration');

            playPauseBtn.addEventListener('click', togglePlay);
            rewindBtn.addEventListener('click', () => {
                audioPlayer.currentTime = Math.max(0, audioPlayer.currentTime - 5);
            });

            progressBar.addEventListener('click', (e) => {
                const rect = progressBar.getBoundingClientRect();
                const pos = (e.clientX - rect.left) / rect.width;
                audioPlayer.currentTime = pos * audioPlayer.duration;
            });

            audioPlayer.addEventListener('timeupdate', () => {
                const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;
                progressFill.style.width = `${progress}%`;
                currentTimeDisplay.textContent = formatTime(audioPlayer.currentTime);
                updateKaraoke();
            });

            audioPlayer.addEventListener('loadedmetadata', () => {
                durationDisplay.textContent = formatTime(audioPlayer.duration);
            });

            audioPlayer.addEventListener('ended', () => {
                playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
            });
        }

        function setupSpeedControls() {
            const speedBtns = document.querySelectorAll('.speed-btn');
            speedBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    currentSpeed = parseFloat(btn.dataset.speed);
                    audioPlayer.playbackRate = currentSpeed;
                    speedBtns.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                });
            });
        }

        function setupRecording() {
            const recordBtn = document.getElementById('recordBtn');
            recordBtn.addEventListener('click', async () => {
                if (!isRecording) {
                    try {
                        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                        mediaRecorder = new MediaRecorder(stream);
                        audioChunks = [];

                        mediaRecorder.ondataavailable = (event) => {
                            audioChunks.push(event.data);
                        };

                        mediaRecorder.onstop = async () => {
                            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                            const formData = new FormData();
                            formData.append('audio', audioBlob, 'recording.wav');
                            formData.append('standardSentence', document.querySelector('.sentence.active').textContent);

                            try {
                                const response = await fetch('/api/audio/process', {
                                    method: 'POST',
                                    body: formData
                                });

                                if (!response.ok) throw new Error('Failed to process audio');

                                const result = await response.json();
                                displayScores(result);
                            } catch (error) {
                                console.error('Error processing audio:', error);
                                alert('Error processing your pronunciation');
                            }
                        };

                        mediaRecorder.start();
                        isRecording = true;
                        recordBtn.classList.add('recording');
                        recordBtn.innerHTML = '<i class="fas fa-stop"></i><span>Stop Recording</span>';
                        audioPlayer.play();
                    } catch (error) {
                        console.error('Error accessing microphone:', error);
                        alert('Error accessing microphone');
                    }
                } else {
                    mediaRecorder.stop();
                    isRecording = false;
                    recordBtn.classList.remove('recording');
                    recordBtn.innerHTML = '<i class="fas fa-microphone"></i><span>Start Recording</span>';
                    audioPlayer.pause();
                }
            });
        }

        function generateWordTimings() {
            const sentences = document.querySelectorAll('.sentence');
            let currentTime = 0;
            const avgWordDuration = audioPlayer.duration / getTotalWords();

            sentences.forEach(sentence => {
                const words = sentence.querySelectorAll('.word');
                sentence.dataset.start = currentTime;
                
                words.forEach(word => {
                    wordTimings.push({
                        element: word,
                        start: currentTime,
                        end: currentTime + avgWordDuration
                    });
                    currentTime += avgWordDuration;
                });

                sentence.dataset.end = currentTime;
            });
        }

        function updateKaraoke() {
            const currentTime = audioPlayer.currentTime;
            const sentences = document.querySelectorAll('.sentence');
            
            sentences.forEach(sentence => {
                const start = parseFloat(sentence.dataset.start);
                const end = parseFloat(sentence.dataset.end);
                
                if (currentTime >= start && currentTime <= end) {
                    sentence.classList.add('active');
                } else {
                    sentence.classList.remove('active');
                }
            });

            wordTimings.forEach(timing => {
                if (currentTime >= timing.start && currentTime <= timing.end) {
                    timing.element.classList.add('highlight');
                } else {
                    timing.element.classList.remove('highlight');
                }
            });
        }

        function togglePlay() {
            if (audioPlayer.paused) {
                audioPlayer.play();
                playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
            } else {
                audioPlayer.pause();
                playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
            }
        }

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            seconds = Math.floor(seconds % 60);
            return `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }

        function getTotalWords() {
            return document.querySelectorAll('.word').length;
        }

        function displayScores(result) {
            document.querySelector('.pronunciation-score').textContent = result.pronunciationScore + '%';
            document.querySelector('.timing-score').textContent = result.stressScore + '%';
            document.querySelector('.fluency-score').textContent = result.syllableScore + '%';
            document.getElementById('scoreDisplay').style.display = 'block';
        }
    </script>
}