@using Newtonsoft.Json
@model EXE_FAIEnglishTutor.Controllers.Lesson.LessonViewModel
@{
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
    ViewData["Title"] = $"Step 5 - {Model.Lesson.Title}";
}

<div id="content" class="p-4 p-md-5 home">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <button type="button" id="sidebarCollapse" class="btn btn-sidebar-custom">
                <i class="fa fa-bars"></i>
                <span class="sr-only">Toggle Menu</span>
            </button>
            <button class="btn btn-dark d-inline-block d-lg-none ml-auto" type="button" data-toggle="collapse"
                    data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                    aria-label="Toggle navigation">
                <i class="fa fa-bars"></i>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="nav navbar-nav ml-auto">
                    @if (User.Identity.IsAuthenticated)
                    {
                        var fullName = User.Identity.Name;
                        var avatarUrl = User.FindFirst("Avatar")?.Value;
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle nav-link-avatar" href="#" id="avatarDropdown" role="button"
                               data-toggle="dropdown" aria-expanded="false">
                                <div class="nav-img">
                                    <img src="@avatarUrl" alt="Avatar" class="img-fluid" style="border-radius: 50%;">
                                </div>
                            </a>
                            <div class="menu-items dropdown-menu dropdown-menu-right" aria-labelledby="avatarDropdown">
                                <div class="menu-title">
                                    <h6 class="dropdown-header">Hello, <span>@fullName</span></h6>
                                </div>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" asp-area="Mentee" asp-controller="Profile" asp-action="index">
                                    <i class="bi bi-person-circle"></i> View Profile
                                </a>
                                <div class="dropdown-divider"></div>
                                <a id="logout-link" class="dropdown-item text-danger" href="#">
                                    <i class="bi bi-box-arrow-right"></i> <span id="logoutOption">Logout</span>
                                </a>
                                <form id="logoutForm" asp-controller="Account" asp-action="Logout" method="post" style="display: none;"></form>
                            </div>
                        </li>
                    }
                    else
                    {
                        <a class="btn-login-custom btn" asp-controller="Account" asp-action="Login">Đăng nhập</a>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <div class="p-4 p-md-5">
        <!-- Progress Bar -->
        <div class="lesson-progress">
            <div class="progress-container">
                <div class="progress-bar">
                    <div class="progress-fill"></div>
                </div>
                <div class="progress-steps">
                    <div class="step active">
                        <div class="step-number">1</div>
                        <div class="step-label">Pronunciation</div>
                    </div>
                    <div class="step active">
                        <div class="step-number">2</div>
                        <div class="step-label">First Listening </div>
                    </div>
                    <div class="step active">
                        <div class="step-number">3</div>
                        <div class="step-label">Second Listening </div>
                    </div>
                    <div class="step active">
                        <div class="step-number">4</div>
                        <div class="step-label">Check Understanding </div>
                    </div>
                    <div class="step active">
                        <div class="step-number">5</div>
                        <div class="step-label">Speaking Practice </div>
                    </div>
                    <div class="step">
                        <div class="step-number">6</div>
                        <div class="step-label">Shadowing </div>
                    </div>
                    <div class="step">
                        <div class="step-number">7</div>
                        <div class="step-label">Review & Practice</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Speaking Practice Container -->
        <div class="speaking-practice-container">
            <div class="lesson-header animated fadeInDown">
                <h2 class="lesson-title">@Model.Lesson.Title</h2>
                <p class="lesson-subtitle">Practice speaking each sentence to improve your pronunciation</p>
            </div>

            <div class="sentences-container">
                @foreach (var sentence in Model.Sentences)
                {
                    <div class="sentence-item mb-4 animated fadeInUp" data-sentence="@sentence" style="display: none;">
                        <div class="sentence-card">
                            <div class="sentence-wrapper">
                                <i class="fas fa-quote-left sentence-icon"></i>
                                <h3 class="sentence">@sentence</h3>
                            </div>

                            <!-- Audio Controls Section -->
                            <div class="audio-section">
                                <div class="audio-wrapper flex-grow-1">
                                    <audio class="sample-audio" controls></audio>
                                </div>
                                <button class="record-btn d-flex align-items-center justify-content-center" onclick="startRecording(this)">
                                    <i class="fas fa-microphone"></i>
                                </button>
                            </div>

                            <!-- Score Display -->
                            <div class="score-display" style="display: none;">
                                <div class="score-container">
                                    <div class="score-item">
                                        <div class="score-circle">
                                            <div class="score-label">Pronunciation</div>
                                            <div class="score pronunciation-score">-</div>
                                        </div>
                                    </div>
                                    <div class="score-item">
                                        <div class="score-circle">
                                            <div class="score-label">Stress</div>
                                            <div class="score stress-score">-</div>
                                        </div>
                                    </div>
                                    <div class="score-item">
                                        <div class="score-circle">
                                            <div class="score-label">Syllable</div>
                                            <div class="score syllable-score">-</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Navigation Buttons -->
                <div class="d-flex align-items-center justify-content-center gap-4 my-4">
                    <button id="prevSentenceBtn" class="btn btn-nav" onclick="previousSentence()" disabled>
                        <i class="fas fa-chevron-left"></i> Previous
                    </button>
                    <span class="sentence-counter fs-5 text-muted">
                        Sentence <span id="currentSentenceIndex">1</span> of <span id="totalSentences">@Model.Sentences.Count</span>
                    </span>
                    <button id="nextSentenceBtn" class="btn btn-nav" onclick="nextSentence()">
                        Next <i class="fas fa-chevron-right"></i>
                    </button>
                </div>

                <!-- Navigation Form -->
                <div class="bottom-navigation">
                    <form id="prevStepForm" method="post" action="@Url.Action("Step4Pre", "Lesson")" style="display: inline;">
                        <input type="hidden" name="id" value="@Model.Lesson.LessonId" />
                        <input type="hidden" name="script" value="@Model.Script" />
                        <input type="hidden" name="audioData" value="@Model.AudioData" />
                        <input type="hidden" name="questions" value="@JsonConvert.SerializeObject(Model.Questions ?? new List<IeltsQuestion>())" />
                        <button type="submit" class="nav-btn prev">
                            <i class="fas fa-arrow-left"></i> Previous
                        </button>
                    </form>
                    <form id="nextStepForm" method="post" action="@Url.Action("Step6", "Lesson")" style="display: inline;">
                        <input type="hidden" name="id" value="@Model.Lesson.LessonId" />
                        <input type="hidden" name="script" value="@Model.Script" />
                        <input type="hidden" name="audioData" value="@Model.AudioData" />
                        <input type="hidden" name="questions" value="@JsonConvert.SerializeObject(Model.Questions ?? new List<IeltsQuestion>())" />
                        <button type="submit" class="nav-btn next">
                            Next <i class="fas fa-arrow-right"></i>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Progress Bar Styles */
    .lesson-progress {
        max-width: 800px;
        margin: 0 auto 2rem;
    }

    .progress-container {
        position: relative;
        padding: 20px 0;
    }

    .progress-bar {
        width: 100%;
        height: 4px;
        background: #e0e0e0;
        border-radius: 2px;
        position: absolute;
        top: 50px;
        z-index: 1;
    }

    .progress-fill {
        width: 71.42%;
        height: 100%;
        background: linear-gradient(90deg, #ff9838 0%, #ffb347 100%);
        border-radius: 2px;
        transition: width 0.5s ease;
        position: relative;
    }

    .progress-steps {
        display: flex;
        justify-content: space-between;
        position: relative;
        z-index: 2;
    }

    .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: #999;
        position: relative;
    }

    .step.active {
        color: #ff9838;
    }

    .step.active .step-number {
        background: #ff9838;
        color: white;
    }

    .step-number {
        width: 30px;
        height: 30px;
        background: #e0e0e0;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        margin-bottom: 8px;
        transition: all 0.3s ease;
    }

    .step-label {
        font-size: 0.85rem;
        font-weight: 500;
        text-align: center;
        white-space: nowrap;
    }

    /* Existing Progress Bar Styles (unchanged) */
    /* ... */

    /* Speaking Practice Styles (updated audio section) */
    .speaking-practice-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 3rem;
    }

    .lesson-header {
        text-align: center;
        margin-bottom: 4rem;
    }

    .lesson-title {
        font-size: 2.2rem;
        color: #ff9838;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .lesson-subtitle {
        color: #666;
        font-size: 1.1rem;
    }

    .sentence-card {
        background: #fff;
        border-radius: 15px;
        padding: 3rem;
        box-shadow: 0 4px 15px rgba(255, 152, 56, 0.1);
        margin-bottom: 3rem;
        border: 2px solid #ffeee0;
        transition: transform 0.2s ease;
    }

        .sentence-card:hover {
            transform: translateY(-3px);
        }

    .sentence {
        font-size: 1.8rem;
        color: #444;
        line-height: 1.6;
        margin-bottom: 2.5rem;
    }

    .audio-section {
        display: flex;
        align-items: center;
        gap: 3rem;
        margin: 3rem 0;
        padding: 1.5rem;
        background: linear-gradient(135deg, #fff8f2 0%, #fff 100%);
        border-radius: 25px;
        box-shadow: 0 4px 15px rgba(255, 152, 56, 0.1);
    }

    .audio-wrapper {
        flex-grow: 1;
        background: white;
        border-radius: 20px;
        padding: 1.2rem;
        box-shadow: 0 2px 8px rgba(255, 152, 56, 0.08);
        transition: all 0.3s ease;
    }

    .audio-wrapper:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(255, 152, 56, 0.12);
    }

    .sample-audio {
        width: 100%;
        height: 45px;
        border-radius: 15px;
        background: linear-gradient(90deg, #ff9838 0%, #ffb347 100%);
    }

    /* Custom audio controls */
    .sample-audio::-webkit-media-controls-panel {
        background: linear-gradient(90deg, #ff9838 0%, #ffb347 100%);
        border-radius: 12px;
        padding: 4px;
    }

    .sample-audio::-webkit-media-controls-play-button {
        background-color: white;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        transition: all 0.2s ease;
    }

    .sample-audio::-webkit-media-controls-play-button:hover {
        transform: scale(1.1);
        background-color: #fff8f2;
    }

    .sample-audio::-webkit-media-controls-timeline {
        background-color: rgba(255, 255, 255, 0.3);
        border-radius: 10px;
        height: 4px;
        padding: 0;
    }

    .sample-audio::-webkit-media-controls-current-time-display,
    .sample-audio::-webkit-media-controls-time-remaining-display {
        color: white;
        font-weight: 500;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .sample-audio::-webkit-media-controls-volume-slider {
        background-color: rgba(255, 255, 255, 0.3);
        border-radius: 10px;
        padding: 0;
    }

    .sample-audio::-webkit-media-controls-mute-button {
        background-color: white;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        transition: all 0.2s ease;
    }

    .sample-audio::-webkit-media-controls-mute-button:hover {
        transform: scale(1.1);
        background-color: #fff8f2;
    }

    /* Record button styles */
    .record-btn {
        width: 70px;
        height: 70px;
        border-radius: 50%;
        border: none;
        background: linear-gradient(135deg, #ff9838 0%, #ffb347 100%);
        color: white;
        font-size: 1.6rem;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(255, 152, 56, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 1rem;
    }

    .record-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 20px rgba(255, 152, 56, 0.3);
    }

    .record-btn.recording {
        background: linear-gradient(135deg, #ff4d4d 0%, #ff6b6b 100%);
        animation: pulseRecord 1.5s infinite;
    }

    @@keyframes pulseRecord {
        0% {
            transform: scale(1);
            box-shadow: 0 4px 15px rgba(255, 77, 77, 0.3);
        }
        50% {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(255, 77, 77, 0.4);
        }
        100% {
            transform: scale(1);
            box-shadow: 0 4px 15px rgba(255, 77, 77, 0.3);
        }
    }

    .score-display {
        background: #fff8f2;
        border-radius: 15px;
        padding: 2rem;
        margin-top: 3rem;
    }

    .score-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 2.5rem;
    }

    .score-circle {
        background: white;
        border: 2px solid #ffd4a8;
        border-radius: 15px;
        padding: 1.8rem;
        text-align: center;
        transition: transform 0.2s ease;
    }

        .score-circle:hover {
            transform: translateY(-3px);
        }

    .score {
        font-size: 2.2rem;
        font-weight: bold;
        color: #ff7043;
        margin-top: 1rem;
    }

    .score-label {
        color: #666;
        margin-bottom: 1rem;
        font-weight: 500;
        font-size: 1.1rem;
    }

    /* Navigation Buttons (unchanged) */
    .nav-btn {
        background: #ff9838;
        color: white;
        border: none;
        padding: 1rem 2rem;
        border-radius: 12px;
        font-weight: 500;
        font-size: 1.1rem;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
    }

        .nav-btn:hover:not(:disabled) {
            background: #ff8515;
            transform: translateY(-2px);
        }

        .nav-btn:disabled {
            background: #ffd4a8;
            cursor: not-allowed;
        }

        .nav-btn.prev {
            margin-right: 2rem;
        }

        .nav-btn.next {
            margin-left: 2rem;
        }

    .bottom-navigation {
        display: flex;
        justify-content: center;
        gap: 3rem;
        margin-top: 4rem;
        padding: 1rem 0;
    }

    .sentence-counter {
        color: #ff7043;
        font-weight: 500;
    }

    /* Animation */
    @@keyframes pulse {
        0%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }

    100% {
        transform: scale(1);
    }

    }</style>

@section Scripts {
    <script>
        let mediaRecorder;
        let audioChunks = [];
        let isRecording = false;
        let currentSentenceIndex = 0;
        const sentenceItems = document.querySelectorAll('.sentence-item');
        const totalSentences = sentenceItems.length;

        document.addEventListener('DOMContentLoaded', function() {
            showSentence(0);
            loadAllAudio();
        });

        function showSentence(index) {
            sentenceItems.forEach(item => item.style.display = 'none');
            sentenceItems[index].style.display = 'block';
            
            document.getElementById('prevSentenceBtn').disabled = index === 0;
            document.getElementById('nextSentenceBtn').disabled = index === totalSentences - 1;
            document.getElementById('currentSentenceIndex').textContent = index + 1;
            
            if (isRecording) {
                const recordBtn = sentenceItems[currentSentenceIndex].querySelector('.record-btn');
                mediaRecorder.stop();
                isRecording = false;
                recordBtn.classList.remove('recording');
                recordBtn.innerHTML = '<i class="fas fa-microphone"></i>';
            }
            
            currentSentenceIndex = index;
        }

        function nextSentence() {
            if (currentSentenceIndex < totalSentences - 1) {
                showSentence(currentSentenceIndex + 1);
            }
        }

        function previousSentence() {
            if (currentSentenceIndex > 0) {
                showSentence(currentSentenceIndex - 1);
            }
        }

        async function loadAllAudio() {
            for (const sentenceItem of sentenceItems) {
                const sentence = sentenceItem.dataset.sentence;
                const sampleAudio = sentenceItem.querySelector('.sample-audio');
                
                try {
                    const formData = new FormData();
                    formData.append('text', sentence);

                    const response = await fetch('/api/audio/generate-english', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) throw new Error('Failed to generate audio');

                    const audioBlob = await response.blob();
                    const audioUrl = URL.createObjectURL(audioBlob);
                    sampleAudio.src = audioUrl;
                } catch (error) {
                    console.error('Error generating audio:', error);
                }
            }
        }

        async function startRecording(button) {
            const sentenceItem = button.closest('.sentence-item');
            const sentence = sentenceItem.dataset.sentence;
            const scoreDisplay = sentenceItem.querySelector('.score-display');
            
            if (!isRecording) {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                    mediaRecorder = new MediaRecorder(stream);
                    audioChunks = [];

                    mediaRecorder.ondataavailable = (event) => {
                        audioChunks.push(event.data);
                    };

                    mediaRecorder.onstop = async () => {
                        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                        const formData = new FormData();
                        formData.append('audio', audioBlob, 'recording.wav');
                        formData.append('standardSentence', sentence);

                        try {
                            const response = await fetch('/api/audio/process', {
                                method: 'POST',
                                body: formData
                            });

                            if (!response.ok) throw new Error('Failed to process audio');

                            const result = await response.json();

                            // Display scores
                            sentenceItem.querySelector('.pronunciation-score').textContent = result.pronunciationScore + '%';
                            sentenceItem.querySelector('.stress-score').textContent = result.stressScore + '%';
                            sentenceItem.querySelector('.syllable-score').textContent = result.syllableScore + '%';
                            scoreDisplay.style.display = 'block';
                        } catch (error) {
                            console.error('Error processing audio:', error);
                            alert('Error processing your pronunciation');
                        }
                    };

                    mediaRecorder.start();
                    isRecording = true;
                    button.classList.add('recording');
                    button.innerHTML = '<i class="fas fa-stop"></i>';
                } catch (error) {
                    console.error('Error accessing microphone:', error);
                    alert('Error accessing microphone');
                }
            } else {
                mediaRecorder.stop();
                isRecording = false;
                button.classList.remove('recording');
                button.innerHTML = '<i class="fas fa-microphone"></i>';
            }
        }

        // Handle logout
        document.getElementById('logout-link').addEventListener('click', function(e) {
            e.preventDefault();
            document.getElementById('logoutForm').submit();
        });
    </script>
}