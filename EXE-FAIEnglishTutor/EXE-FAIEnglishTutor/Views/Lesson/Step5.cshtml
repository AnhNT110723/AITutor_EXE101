@using Newtonsoft.Json
@{
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
    ViewData["Title"] = $"Step 5 - Practice - {ViewBag.Lesson.SituationName}";
}

<div id="content" class="p-4 p-md-5 home">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <button type="button" id="sidebarCollapse" class="btn btn-sidebar-custom">
                <i class="fa fa-bars"></i>
                <span class="sr-only">Toggle Menu</span>
            </button>
            <button class="btn btn-dark d-inline-block d-lg-none ml-auto" type="button" data-toggle="collapse"
                    data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                    aria-label="Toggle navigation">
                <i class="fa fa-bars"></i>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="nav navbar-nav ml-auto">
                    @if (User.Identity.IsAuthenticated)
                    {
                        var fullName = User.Identity.Name;
                        var avatarUrl = User.FindFirst("Avatar")?.Value;
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle nav-link-avatar" href="#" id="avatarDropdown" role="button"
                               data-toggle="dropdown" aria-expanded="false">
                                <div class="nav-img">
                                    <img src="@avatarUrl" alt="Avatar" class="img-fluid" style="border-radius: 50%;">
                                </div>
                            </a>
                            <div class="menu-items dropdown-menu dropdown-menu-right" aria-labelledby="avatarDropdown">
                                <div class="menu-title">
                                    <h6 class="dropdown-header">Hello, <span>@fullName</span></h6>
                                </div>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" asp-area="Mentee" asp-controller="Profile" asp-action="index">
                                    <i class="bi bi-person-circle"></i> View Profile
                                </a>
                                <div class="dropdown-divider"></div>
                                <a id="logout-link" class="dropdown-item text-danger" href="#">
                                    <i class="bi bi-box-arrow-right"></i> <span id="logoutOption">Logout</span>
                                </a>
                                <form id="logoutForm" asp-controller="Account" asp-action="Logout" method="post" style="display: none;"></form>
                            </div>
                        </li>
                    }
                    else
                    {
                        <a class="btn-login-custom btn" asp-controller="Account" asp-action="Login">Đăng nhập</a>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <div class="p-4 p-md-5">
        <!-- Progress Bar -->
        <div class="lesson-progress">
            <div class="progress-container">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 100%"></div>
                </div>
                <div class="progress-steps">
                    <div class="step active">
                        <div class="step-number">1</div>
                        <div class="step-label">Pronunciation Preview</div>
                    </div>
                    <div class="step active">
                        <div class="step-number">2</div>
                        <div class="step-label">First Listening</div>
                    </div>
                    <div class="step active">
                        <div class="step-number">3</div>
                        <div class="step-label">Dictation Practice</div>
                    </div>
                    <div class="step active">
                        <div class="step-number">4</div>
                        <div class="step-label">Check & Compare</div>
                    </div>
                    <div class="step active">
                        <div class="step-number">5</div>
                        <div class="step-label">Practice & Improve</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="practice-container">
            <!-- Lesson Header -->
            <div class="lesson-header">
                <h2 class="lesson-title">@ViewBag.Lesson.SituationName</h2>
                <p class="lesson-subtitle">Practice & Improve - Focus on the parts you need to work on</p>
            </div>

            <!-- Audio Player Section -->
            <div class="audio-player-container">
                <audio id="listeningAudio" class="custom-audio-player" controls style="display: none;"></audio>
                <div class="podcast-player">
                    <div class="player-artwork">
                        <img src="@ViewBag.Lesson.ImageUrl" alt="Lesson Cover" />
                    </div>
                    <div class="player-controls">
                        <div class="time-display">
                            <span id="currentTime">0:00</span> / <span id="duration">0:00</span>
                        </div>
                        <div class="progress-container">
                            <div id="audioProgress" class="audio-progress">
                                <div id="audioProgressBar" class="audio-progress-bar"></div>
                            </div>
                        </div>
                        <div class="control-buttons">
                            <button class="control-btn" onclick="audioPlayer.currentTime -= 10">
                                <i class="fas fa-backward"></i>
                            </button>
                            <button id="playPauseBtn" class="control-btn play-btn pulse">
                                <i class="fas fa-play"></i>
                            </button>
                            <button class="control-btn" onclick="audioPlayer.currentTime += 10">
                                <i class="fas fa-forward"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Practice Mode Selection -->
            <div class="practice-mode-selection">
                <h3><i class="fas fa-cogs"></i> Choose Practice Mode</h3>
                <div class="mode-options">
                    <div class="mode-option active" data-mode="fill-blank">
                        <i class="fas fa-edit"></i>
                        <h4>Fill in the Blank</h4>
                        <p>Listen and fill in the missing words</p>
                    </div>
                    <div class="mode-option" data-mode="slow-listen">
                        <i class="fas fa-volume-down"></i>
                        <h4>Slow Listening</h4>
                        <p>Listen at slower speed for better comprehension</p>
                    </div>
                    <div class="mode-option" data-mode="repeat-practice">
                        <i class="fas fa-redo"></i>
                        <h4>Repeat Practice</h4>
                        <p>Practice with unlimited replays</p>
                    </div>
                </div>
            </div>

            <!-- Practice Exercises -->
            <div class="practice-exercises">
                <div id="fill-blank-exercises" class="exercise-section active">
                    <h3><i class="fas fa-edit"></i> Fill in the Blank Exercises</h3>
                    <p class="exercise-instruction">Listen to each sentence and fill in the blanks with the correct words.</p>
                    
                    <div id="fill-blank-container">
                        <!-- Exercises will be populated by JavaScript -->
                    </div>
                </div>

                <div id="slow-listen-exercises" class="exercise-section">
                    <h3><i class="fas fa-volume-down"></i> Slow Listening Practice</h3>
                    <p class="exercise-instruction">Listen to the sentences at a slower speed to improve your comprehension.</p>
                    
                    <div id="slow-listen-container">
                        <!-- Exercises will be populated by JavaScript -->
                    </div>
                </div>

                <div id="repeat-practice-exercises" class="exercise-section">
                    <h3><i class="fas fa-redo"></i> Repeat Practice</h3>
                    <p class="exercise-instruction">Practice with unlimited replays until you get it right.</p>
                    
                    <div id="repeat-practice-container">
                        <!-- Exercises will be populated by JavaScript -->
                    </div>
                </div>
            </div>

            <!-- Practice Actions -->
            <div class="practice-actions">
                <button id="checkPracticeResults" class="btn-primary">
                    <i class="fas fa-check"></i> Check Practice Results
                </button>
                <button id="showFinalResults" class="btn-secondary" style="display: none;">
                    <i class="fas fa-chart-bar"></i> Show Final Results
                </button>
            </div>

            <!-- Final Results -->
            <div class="final-results" style="display: none;">
                <h3><i class="fas fa-trophy"></i> Practice Complete!</h3>
                <div class="results-summary">
                    <div class="result-item">
                        <span class="result-label">Practice Accuracy:</span>
                        <span class="result-value" id="practiceAccuracy">-</span>
                    </div>
                    <div class="result-item">
                        <span class="result-label">Improvement:</span>
                        <span class="result-value" id="improvement">-</span>
                    </div>
                </div>
                <div class="completion-message">
                    <p>Great job! You've completed the practice session. Your listening skills have improved!</p>
                </div>
            </div>

            <!-- Navigation -->
            <div class="bottom-navigation">
                <a href="@Url.Action("Step4", "Lesson", new { id = ViewBag.Lesson.SituatuonId })" class="nav-btn prev">
                    <i class="fas fa-arrow-left"></i> Back to Results
                </a>
                <a href="/Mentee/Listening" class="nav-btn next">
                    Complete Lesson <i class="fas fa-check"></i>
                </a>
            </div>
        </div>
    </div>
</div>

<style>
    .practice-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
        background: #fff;
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(255, 152, 56, 0.1);
    }

    .lesson-header {
        text-align: center;
        margin-bottom: 2.5rem;
    }

    .lesson-title {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 1rem;
    }

    .lesson-subtitle {
        color: var(--text-light);
        font-size: 1.1rem;
        margin-bottom: 2rem;
    }

    .practice-mode-selection {
        background: var(--bg-light);
        border-radius: 15px;
        padding: 2rem;
        margin: 2rem 0;
    }

    .practice-mode-selection h3 {
        color: var(--primary-color);
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .mode-options {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .mode-option {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

    .mode-option:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(255, 152, 56, 0.2);
    }

    .mode-option.active {
        border-color: var(--primary-color);
        background: #fff1e6;
    }

    .mode-option i {
        font-size: 2rem;
        color: var(--primary-color);
        margin-bottom: 1rem;
    }

    .mode-option h4 {
        color: var(--text-dark);
        margin-bottom: 0.5rem;
    }

    .mode-option p {
        color: var(--text-light);
        font-size: 0.9rem;
        margin: 0;
    }

    .exercise-section {
        display: none;
        background: var(--bg-light);
        border-radius: 15px;
        padding: 2rem;
        margin: 2rem 0;
    }

    .exercise-section.active {
        display: block;
    }

    .exercise-section h3 {
        color: var(--primary-color);
        margin-bottom: 1rem;
    }

    .exercise-instruction {
        color: var(--text-light);
        margin-bottom: 2rem;
        font-style: italic;
    }

    .fill-blank-exercise {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        border-left: 4px solid var(--primary-color);
    }

    .exercise-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .exercise-number {
        background: var(--primary-color);
        color: white;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }

    .play-exercise-btn {
        background: var(--primary-color);
        color: white;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .play-exercise-btn:hover {
        background: var(--primary-dark);
        transform: scale(1.1);
    }

    .fill-blank-text {
        font-size: 1.1rem;
        line-height: 1.8;
        margin-bottom: 1rem;
    }

    .blank-input {
        display: inline-block;
        width: 120px;
        padding: 0.5rem;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        margin: 0 0.3rem;
        text-align: center;
        font-size: 1rem;
    }

    .blank-input:focus {
        outline: none;
        border-color: var(--primary-color);
    }

    .blank-input.correct {
        border-color: #28a745;
        background-color: #d4edda;
    }

    .blank-input.incorrect {
        border-color: #dc3545;
        background-color: #f8d7da;
    }

    .practice-actions {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin: 2rem 0;
    }

    .final-results {
        background: var(--bg-light);
        border-radius: 15px;
        padding: 2rem;
        margin: 2rem 0;
        text-align: center;
    }

    .final-results h3 {
        color: var(--primary-color);
        margin-bottom: 1.5rem;
    }

    .results-summary {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .result-item {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
    }

    .result-label {
        display: block;
        font-size: 0.9rem;
        color: var(--text-light);
        margin-bottom: 0.5rem;
    }

    .result-value {
        display: block;
        font-size: 1.5rem;
        font-weight: bold;
        color: var(--primary-color);
    }

    .completion-message {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid var(--primary-color);
    }

    .completion-message p {
        color: var(--text-dark);
        margin: 0;
        font-size: 1.1rem;
    }

    /* Progress Bar Styles */
    .lesson-progress {
        max-width: 800px;
        margin: 0 auto 2rem;
    }

    .progress-container {
        position: relative;
        padding: 20px 0;
    }

    .progress-bar {
        width: 100%;
        height: 4px;
        background: #e0e0e0;
        border-radius: 2px;
        position: absolute;
        top: 50px;
        z-index: 1;
    }

    .progress-fill {
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, #ff9838 0%, #ffb347 100%);
        border-radius: 2px;
        transition: width 0.5s ease;
        position: relative;
    }

    .progress-steps {
        display: flex;
        justify-content: space-between;
        position: relative;
        z-index: 2;
    }

    .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: #999;
        position: relative;
    }

    .step.active {
        color: #ff9838;
    }

    .step.active .step-number {
        background: #ff9838;
        color: white;
    }

    .step-number {
        width: 30px;
        height: 30px;
        background: #e0e0e0;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        margin-bottom: 8px;
        transition: all 0.3s ease;
    }

    .step-label {
        font-size: 0.85rem;
        font-weight: 500;
        text-align: center;
        white-space: nowrap;
    }

    /* Audio Player Styles */
    .audio-player-container {
        width: 70%;
        margin: 0 auto;
        padding: 1rem;
        background: rgba(255, 152, 56, 0.1);
        border-radius: 15px;
        transition: all 0.3s ease;
    }

    .audio-player-container:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(255, 152, 56, 0.2);
    }

    .podcast-player {
        display: flex;
        align-items: center;
        background: #fff;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 2rem 0;
        box-shadow: 0 4px 15px rgba(255, 152, 56, 0.1);
    }

    .player-artwork {
        width: 150px;
        height: 150px;
        border-radius: 10px;
        overflow: hidden;
        margin-right: 2rem;
    }

    .player-artwork img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .player-controls {
        flex: 1;
    }

    .control-buttons {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .play-btn {
        width: 60px;
        height: 60px;
        font-size: 1.5rem;
    }

    .control-btn {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        border: none;
        background: #ff9838;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
    }

    .control-btn.pulse::before {
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;
        border-radius: 50%;
        background: rgba(255, 152, 56, 0.4);
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
            opacity: 0.8;
        }

        70% {
            transform: scale(1.3);
            opacity: 0;
        }

        100% {
            transform: scale(1);
            opacity: 0;
        }
    }

    .progress-container {
        flex: 1;
        margin-right: 1rem;
    }

    .audio-progress {
        height: 8px;
        background: rgba(255, 152, 56, 0.2);
        border-radius: 4px;
        cursor: pointer;
        margin-bottom: 0.5rem;
        overflow: hidden;
    }

    .audio-progress-bar {
        height: 100%;
        background: #ff9838;
        border-radius: 4px;
        transition: width 0.1s linear;
        position: relative;
    }

    .audio-progress-bar::after {
        content: '';
        position: absolute;
        right: -2px;
        top: 50%;
        transform: translateY(-50%);
        width: 12px;
        height: 12px;
        background: #ff9838;
        border-radius: 50%;
        box-shadow: 0 0 5px rgba(0,0,0,0.2);
    }

    .time-display {
        color: #ff9838;
        font-weight: 500;
        font-size: 0.9rem;
    }

    .bottom-navigation {
        display: flex;
        justify-content: space-between;
        margin-top: 2rem;
    }

    .nav-btn {
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        text-decoration: none;
        transition: all 0.3s ease;
    }

    .nav-btn.prev {
        background: var(--bg-light);
        color: var(--text-dark);
    }

    .nav-btn.next {
        background: var(--primary-color);
        color: var(--white);
    }

    .nav-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    :root {
        --primary-color: #ff9838;
        --primary-dark: #ff8108;
        --primary-light: #ffb347;
        --text-dark: #2c3e50;
        --text-light: #7f8c8d;
        --bg-light: #f8f9fa;
        --white: #ffffff;
    }

    .btn-primary {
        background: var(--primary-color);
        color: var(--white);
        border: none;
        padding: 0.8rem 2rem;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        background: var(--primary-dark);
        transform: translateY(-2px);
    }

    .btn-secondary {
        background: var(--text-light);
        color: var(--white);
        border: none;
        padding: 0.8rem 2rem;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-secondary:hover {
        background: #6c757d;
        transform: translateY(-2px);
    }
</style>

@section Scripts {
    <script>
        let audioPlayer;
        let playPauseBtn;
        let progressBar;
        let currentTimeSpan;
        let durationSpan;
        let practiceData = [];
        let currentMode = 'fill-blank';

        document.addEventListener('DOMContentLoaded', function() {
            initializeAudio();
            loadListeningAudio();
            initializePractice();
            loadPracticeData();
        });

        function initializeAudio() {
            audioPlayer = document.getElementById('listeningAudio');
            playPauseBtn = document.getElementById('playPauseBtn');
            progressBar = document.getElementById('audioProgressBar');
            currentTimeSpan = document.getElementById('currentTime');
            durationSpan = document.getElementById('duration');

            // Play/Pause button
            playPauseBtn.addEventListener('click', togglePlay);

            // Audio event listeners
            audioPlayer.addEventListener('play', updatePlayButton);
            audioPlayer.addEventListener('pause', updatePlayButton);
            audioPlayer.addEventListener('timeupdate', updateProgress);
            audioPlayer.addEventListener('loadedmetadata', () => {
                durationSpan.textContent = formatTime(audioPlayer.duration);
            });

            // Progress bar click
            document.getElementById('audioProgress').addEventListener('click', function(e) {
                const percent = e.offsetX / this.offsetWidth;
                audioPlayer.currentTime = percent * audioPlayer.duration;
            });
        }

        async function loadListeningAudio() {
            try {
                const audioData = @Html.Raw(Json.Serialize(ViewBag.AudioData));
                if (!audioData) {
                    throw new Error('Audio data is not available');
                }

                // Convert Base64 to Blob
                const base64Data = audioData.split(',')[1];
                const byteCharacters = atob(base64Data);
                const byteNumbers = new Array(byteCharacters.length);

                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }

                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'audio/mp3' });
                const audioUrl = URL.createObjectURL(blob);

                audioPlayer.src = audioUrl;
                audioPlayer.load();

                // Clean up the URL when the audio is loaded
                audioPlayer.onload = () => {
                    URL.revokeObjectURL(audioUrl);
                };

            } catch (error) {
                console.error('Error loading audio:', error);
            }
        }

        function togglePlay() {
            if (audioPlayer.paused) {
                audioPlayer.play();
            } else {
                audioPlayer.pause();
            }
        }

        function updatePlayButton() {
            playPauseBtn.innerHTML = audioPlayer.paused ?
                '<i class="fas fa-play"></i>' :
                '<i class="fas fa-pause"></i>';
        }

        function updateProgress() {
            const percent = (audioPlayer.currentTime / audioPlayer.duration) * 100;
            progressBar.style.width = percent + '%';
            currentTimeSpan.textContent = formatTime(audioPlayer.currentTime);
        }

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            seconds = Math.floor(seconds % 60);
            return `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }

        function initializePractice() {
            // Mode selection
            document.querySelectorAll('.mode-option').forEach(option => {
                option.addEventListener('click', function() {
                    const mode = this.dataset.mode;
                    switchMode(mode);
                });
            });

            // Practice actions
            document.getElementById('checkPracticeResults').addEventListener('click', checkPracticeResults);
            document.getElementById('showFinalResults').addEventListener('click', showFinalResults);
        }

        function loadPracticeData() {
            const storedData = localStorage.getItem('practiceData');
            if (storedData) {
                practiceData = JSON.parse(storedData);
                generateFillBlankExercises();
            } else {
                // Fallback if no practice data
                practiceData = [];
                document.querySelector('.practice-container').innerHTML = '<p>No practice data available. Please complete Step 4 first.</p>';
            }
        }

        function switchMode(mode) {
            currentMode = mode;
            
            // Update active mode option
            document.querySelectorAll('.mode-option').forEach(option => {
                option.classList.remove('active');
            });
            document.querySelector(`[data-mode="${mode}"]`).classList.add('active');
            
            // Show corresponding exercise section
            document.querySelectorAll('.exercise-section').forEach(section => {
                section.classList.remove('active');
            });
            document.getElementById(`${mode}-exercises`).classList.add('active');
            
            // Generate exercises for the selected mode
            switch(mode) {
                case 'fill-blank':
                    generateFillBlankExercises();
                    break;
                case 'slow-listen':
                    generateSlowListenExercises();
                    break;
                case 'repeat-practice':
                    generateRepeatPracticeExercises();
                    break;
            }
        }

        function generateFillBlankExercises() {
            const container = document.getElementById('fill-blank-container');
            container.innerHTML = '';

            practiceData.forEach((item, index) => {
                const exercise = createFillBlankExercise(item, index);
                container.appendChild(exercise);
            });
        }

        function createFillBlankExercise(item, index) {
            const exerciseDiv = document.createElement('div');
            exerciseDiv.className = 'fill-blank-exercise';
            exerciseDiv.dataset.index = index;

            const words = item.sentence.split(' ');
            const userWords = item.userInput.split(' ');
            const blankWords = [];

            // Identify words that were incorrect or missing
            words.forEach((word, wordIndex) => {
                const userWord = userWords[wordIndex] || '';
                if (word.toLowerCase() !== userWord.toLowerCase()) {
                    blankWords.push({ word: word, index: wordIndex });
                }
            });

            // Create sentence with blanks
            let sentenceWithBlanks = '';
            words.forEach((word, wordIndex) => {
                const isBlank = blankWords.some(bw => bw.index === wordIndex);
                if (isBlank) {
                    sentenceWithBlanks += `<input type="text" class="blank-input" data-correct="${word}" data-index="${wordIndex}" placeholder="___"> `;
                } else {
                    sentenceWithBlanks += `<span>${word}</span> `;
                }
            });

            exerciseDiv.innerHTML = `
                <div class="exercise-header">
                    <span class="exercise-number">${index + 1}</span>
                    <button class="play-exercise-btn" onclick="playExercise(${index})">
                        <i class="fas fa-play"></i>
                    </button>
                </div>
                <div class="fill-blank-text">
                    ${sentenceWithBlanks}
                </div>
            `;

            return exerciseDiv;
        }

        function generateSlowListenExercises() {
            const container = document.getElementById('slow-listen-container');
            container.innerHTML = '<p>Slow listening exercises will be implemented here.</p>';
        }

        function generateRepeatPracticeExercises() {
            const container = document.getElementById('repeat-practice-container');
            container.innerHTML = '<p>Repeat practice exercises will be implemented here.</p>';
        }

        function playExercise(index) {
            // Calculate approximate time for this sentence
        const sentenceCount = sentences.length;
        const sentenceIndex = practiceData[index].index;
        const timePerSentence = audioPlayer.duration / sentenceCount;
        const startTime = sentenceIndex * timePerSentence;
        const endTime = (sentenceIndex + 1) * timePerSentence;


            audioPlayer.currentTime = startTime;
            audioPlayer.play();

            // Stop at the end of the sentence
            const checkTime = setInterval(() => {
                if (audioPlayer.currentTime >= endTime) {
                    audioPlayer.pause();
                    clearInterval(checkTime);
                }
            }, 100);
        }

        function checkPracticeResults() {
            const blankInputs = document.querySelectorAll('.blank-input');
            let correctCount = 0;
            let totalBlanks = blankInputs.length;

            blankInputs.forEach(input => {
                const userAnswer = input.value.trim().toLowerCase();
                const correctAnswer = input.dataset.correct.toLowerCase();
                
                if (userAnswer === correctAnswer) {
                    input.classList.add('correct');
                    input.classList.remove('incorrect');
                    correctCount++;
                } else {
                    input.classList.add('incorrect');
                    input.classList.remove('correct');
                }
            });

            const accuracy = totalBlanks > 0 ? Math.round((correctCount / totalBlanks) * 100) : 0;
            
            // Show results
            document.getElementById('practiceAccuracy').textContent = `${accuracy}%`;
            document.getElementById('improvement').textContent = `${accuracy}% accuracy`;
            
            document.getElementById('showFinalResults').style.display = 'inline-block';
        }

        function showFinalResults() {
            document.querySelector('.final-results').style.display = 'block';
        }
    </script>
}