@using Newtonsoft.Json
@{
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
    ViewData["Title"] = $"Step 2 - {ViewBag.Lesson.SituationName}";
}

<div id="content" class="p-4 p-md-5 home">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <button type="button" id="sidebarCollapse" class="btn btn-sidebar-custom">
                <i class="fa fa-bars"></i>
                <span class="sr-only">Toggle Menu</span>
            </button>
            <button class="btn btn-dark d-inline-block d-lg-none ml-auto" type="button" data-toggle="collapse"
                    data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                    aria-label="Toggle navigation">
                <i class="fa fa-bars"></i>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="nav navbar-nav ml-auto">
                    @if (User.Identity.IsAuthenticated)
                    {
                        var fullName = User.Identity.Name;
                        var avatarUrl = User.FindFirst("Avatar")?.Value;
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle nav-link-avatar" href="#" id="avatarDropdown" role="button"
                               data-toggle="dropdown" aria-expanded="false">
                                <div class="nav-img">
                                    <img src="@avatarUrl" alt="Avatar" class="img-fluid" style="border-radius: 50%;">
                                </div>
                            </a>
                            <div class="menu-items dropdown-menu dropdown-menu-right" aria-labelledby="avatarDropdown">
                                <div class="menu-title">
                                    <h6 class="dropdown-header">Hello, <span>@fullName</span></h6>
                                </div>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" asp-area="Mentee" asp-controller="Profile" asp-action="index">
                                    <i class="bi bi-person-circle"></i> View Profile
                                </a>
                                <div class="dropdown-divider"></div>
                                <a id="logout-link" class="dropdown-item text-danger" href="#">
                                    <i class="bi bi-box-arrow-right"></i> <span id="logoutOption">Logout</span>
                                </a>
                                <form id="logoutForm" asp-controller="Account" asp-action="Logout" method="post" style="display: none;"></form>
                            </div>
                        </li>
                    }
                    else
                    {
                        <a class="btn-login-custom btn" asp-controller="Account" asp-action="Login">Đăng nhập</a>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <div class="p-4 p-md-5">
        <!-- Progress Bar -->
        <div class="lesson-progress">
            <div class="progress-container">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 50%"></div>
                </div>
                <div class="progress-steps">
                    <div class="step active">
                        <div class="step-number">1</div>
                        <div class="step-label">Pronunciation Preview</div>
                    </div>
                    <div class="step active">
                        <div class="step-number">2</div>
                        <div class="step-label">First Listening</div>
                    </div>
                    <div class="step">
                        <div class="step-number">3</div>
                        <div class="step-label">Dictation Practice</div>
                    </div>
                    <div class="step">
                        <div class="step-number">4</div>
                        <div class="step-label">Check & Compare</div>
                    </div>
                    <div class="step">
                        <div class="step-number">5</div>
                        <div class="step-label">Practice & Improve</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="listening-container">
            <!-- Lesson Header -->
            <div class="lesson-header">
                <h2 class="lesson-title">@ViewBag.Lesson.SituationName</h2>
            
            </div>

            <!-- Audio Player Section -->
            <div class="audio-player-container">
                <audio id="listeningAudio" class="custom-audio-player" controls style="display: none;"></audio>
                <div class="podcast-player">
                    <div class="player-artwork">
                        <img src="/images/podcast-default.jpg" alt="Lesson Cover" />
                    </div>
                    <div class="player-controls">
                        <div class="time-display">
                            <span id="currentTime">0:00</span> / <span id="duration">0:00</span>
                        </div>
                        <div class="progress-container">
                            <div id="audioProgress" class="audio-progress">
                                <div id="audioProgressBar" class="audio-progress-bar"></div>
                            </div>
                        </div>
                        <div class="control-buttons">
                            <button class="control-btn" onclick="audioPlayer.currentTime -= 10">
                                <i class="fas fa-backward"></i>
                            </button>
                            <button id="playPauseBtn" class="control-btn play-btn pulse">
                                <i class="fas fa-play"></i>
                            </button>
                            <button class="control-btn" onclick="audioPlayer.currentTime += 10">
                                <i class="fas fa-forward"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Simple MCQ Question -->
            <div class="mcq-section">
                <div class="mcq-container">
                    <h3><i class="fas fa-headphones"></i> Listening Comprehension Test</h3>
                    <p class="mcq-question">Listen to the audio and answer the following questions:</p>
                    
                    <!-- Question 1 -->
                    <div class="question-item">
                        <h4>Question 1: What is the main topic of this audio?</h4>
                        <div class="mcq-options">
                            <div class="mcq-option" data-correct="true" data-question="1">
                                <input type="radio" name="q1" id="q1_1" value="1">
                                <label for="q1_1">Daily conversation</label>
                            </div>
                            <div class="mcq-option" data-correct="false" data-question="1">
                                <input type="radio" name="q1" id="q1_2" value="2">
                                <label for="q1_2">Business meeting</label>
                            </div>
                            <div class="mcq-option" data-correct="false" data-question="1">
                                <input type="radio" name="q1" id="q1_3" value="3">
                                <label for="q1_3">Travel planning</label>
                            </div>
                            <div class="mcq-option" data-correct="false" data-question="1">
                                <input type="radio" name="q1" id="q1_4" value="4">
                                <label for="q1_4">Academic discussion</label>
                            </div>
                        </div>
                    </div>

                    <!-- Question 2 -->
                    <div class="question-item">
                        <h4>Question 2: How many people are speaking in the conversation?</h4>
                        <div class="mcq-options">
                            <div class="mcq-option" data-correct="false" data-question="2">
                                <input type="radio" name="q2" id="q2_1" value="1">
                                <label for="q2_1">One person</label>
                            </div>
                            <div class="mcq-option" data-correct="true" data-question="2">
                                <input type="radio" name="q2" id="q2_2" value="2">
                                <label for="q2_2">Two people</label>
                            </div>
                            <div class="mcq-option" data-correct="false" data-question="2">
                                <input type="radio" name="q2" id="q2_3" value="3">
                                <label for="q2_3">Three people</label>
                            </div>
                            <div class="mcq-option" data-correct="false" data-question="2">
                                <input type="radio" name="q2" id="q2_4" value="4">
                                <label for="q2_4">Four people</label>
                            </div>
                        </div>
                    </div>

                    <!-- Question 3 -->
                    <div class="question-item">
                        <h4>Question 3: What is the tone of the conversation?</h4>
                        <div class="mcq-options">
                            <div class="mcq-option" data-correct="false" data-question="3">
                                <input type="radio" name="q3" id="q3_1" value="1">
                                <label for="q3_1">Formal and serious</label>
                            </div>
                            <div class="mcq-option" data-correct="false" data-question="3">
                                <input type="radio" name="q3" id="q3_2" value="2">
                                <label for="q3_2">Angry and confrontational</label>
                            </div>
                            <div class="mcq-option" data-correct="true" data-question="3">
                                <input type="radio" name="q3" id="q3_3" value="3">
                                <label for="q3_3">Casual and friendly</label>
                            </div>
                            <div class="mcq-option" data-correct="false" data-question="3">
                                <input type="radio" name="q3" id="q3_4" value="4">
                                <label for="q3_4">Professional and distant</label>
                            </div>
                        </div>
                    </div>

                    <!-- Question 4 -->
                    <div class="question-item">
                        <h4>Question 4: What is the main purpose of this conversation?</h4>
                        <div class="mcq-options">
                            <div class="mcq-option" data-correct="false" data-question="4">
                                <input type="radio" name="q4" id="q4_1" value="1">
                                <label for="q4_1">To make a business deal</label>
                            </div>
                            <div class="mcq-option" data-correct="false" data-question="4">
                                <input type="radio" name="q4" id="q4_2" value="2">
                                <label for="q4_2">To plan a vacation</label>
                            </div>
                            <div class="mcq-option" data-correct="false" data-question="4">
                                <input type="radio" name="q4" id="q4_3" value="3">
                                <label for="q4_3">To discuss academic topics</label>
                            </div>
                            <div class="mcq-option" data-correct="true" data-question="4">
                                <input type="radio" name="q4" id="q4_4" value="4">
                                <label for="q4_4">To have a casual chat</label>
                            </div>
                        </div>
                    </div>

                    <div class="mcq-actions">
                        <button id="checkAnswers" class="btn-primary">
                            <i class="fas fa-check"></i> Check Answers
                        </button>
                        <button id="showResults" class="btn-secondary" style="display: none;">
                            <i class="fas fa-chart-bar"></i> Show Results
                        </button>
                    </div>

                    <div class="mcq-feedback" style="display: none;">
                        <div class="feedback-summary"></div>
                        <div class="question-feedback"></div>
                    </div>
                </div>
            </div>

            <!-- Navigation -->
            <div class="bottom-navigation">
                <a href="@Url.Action("Step1", "Lesson", new { id = ViewBag.Lesson.SituatuonId })" class="nav-btn prev">
                    <i class="fas fa-arrow-left"></i> Previous
                </a>
                <form id="nextStepForm" method="post" action="@Url.Action("Step3", "Lesson")" style="display: inline;">
                    <input type="hidden" name="id" value="@ViewBag.Lesson.SituatuonId" />
                    <input type="hidden" name="script" value="@ViewBag.Script" />
                    <input type="hidden" name="audioData" value="@ViewBag.AudioData" />
                    <input type="hidden" name="questions" value="@JsonConvert.SerializeObject(ViewBag.Questions ?? new List<IeltsQuestion>())" />
                    <button type="submit" class="nav-btn next">
                        Next <i class="fas fa-arrow-right"></i>
                    </button>
                </form>
            </div>
        </div>
        </div>
    </div>

    <style>
    .audio-player-container {
        width: 70%;
        margin: 0 auto;
        padding: 1rem;
        background: rgba(255, 152, 56, 0.1);
        border-radius: 15px;
        transition: all 0.3s ease;
    }

        .audio-player-container:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 152, 56, 0.2);
        }

    .podcast-player {
        display: flex;
        align-items: center;
        background: #fff;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 2rem 0;
        box-shadow: 0 4px 15px rgba(255, 152, 56, 0.1);
    }

    .player-artwork {
        width: 150px;
        height: 150px;
        border-radius: 10px;
        overflow: hidden;
        margin-right: 2rem;
    }

        .player-artwork img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .player-controls {
        flex: 1;
    }

    .control-buttons {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .play-btn {
        width: 60px;
        height: 60px;
        font-size: 1.5rem;
    }

    .control-btn {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        border: none;
        background: #ff9838;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
    }

        .control-btn.pulse::before {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: rgba(255, 152, 56, 0.4);
            animation: pulse 2s infinite;
        }

    @@keyframes pulse {
        0% {
            transform: scale(1);
            opacity: 0.8;
        }

        70% {
            transform: scale(1.3);
            opacity: 0;
        }

        100% {
            transform: scale(1);
            opacity: 0;
        }
    }

    .progress-container {
        flex: 1;
        margin-right: 1rem;
    }

    .audio-progress {
        height: 8px;
        background: rgba(255, 152, 56, 0.2);
        border-radius: 4px;
        cursor: pointer;
        margin-bottom: 0.5rem;
        overflow: hidden;
    }

    .audio-progress-bar {
        height: 100%;
        background: #ff9838;
        border-radius: 4px;
        transition: width 0.1s linear;
        position: relative;
    }

        .audio-progress-bar::after {
            content: '';
            position: absolute;
            right: -2px;
            top: 50%;
            transform: translateY(-50%);
            width: 12px;
            height: 12px;
            background: #ff9838;
            border-radius: 50%;
            box-shadow: 0 0 5px rgba(0,0,0,0.2);
        }

    .time-display {
        color: #ff9838;
        font-weight: 500;
        font-size: 0.9rem;
    }
    /* Progress Bar Styles */
    .lesson-progress {
        max-width: 800px;
        margin: 0 auto 2rem;
    }

    .progress-container {
        position: relative;
        padding: 20px 0;
    }

    .progress-bar {
        width: 100%;
        height: 4px;
        background: #e0e0e0;
        border-radius: 2px;
        position: absolute;
        top: 50px;
        z-index: 1;
    }

    .progress-fill {
        width: 40%; /* 2/5 of the total width */
        height: 100%;
        background: linear-gradient(90deg, #ff9838 0%, #ffb347 100%);
        border-radius: 2px;
        transition: width 0.5s ease;
        position: relative;
    }

    .progress-steps {
        display: flex;
        justify-content: space-between;
        position: relative;
        z-index: 2;
    }

    .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: #999;
        position: relative;
    }

        .step.active {
            color: #ff9838;
        }

            .step.active .step-number {
                background: #ff9838;
                color: white;
            }

    .step-number {
        width: 30px;
        height: 30px;
        background: #e0e0e0;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        margin-bottom: 8px;
        transition: all 0.3s ease;
    }

    .step-label {
        font-size: 0.85rem;
        font-weight: 500;
        text-align: center;
        white-space: nowrap;
    }
        :root {
        --primary-color: #ff9838;
        --primary-dark: #ff8108;
        --primary-light: #ffb347;
        --text-dark: #2c3e50;
        --text-light: #7f8c8d;
        --bg-light: #f8f9fa;
        --white: #ffffff;
        }

        .listening-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
        }

        .lesson-header {
        text-align: center;
        margin-bottom: 2.5rem;
        }

        .lesson-title {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 1rem;
        }

        .situation-box {
        background: var(--bg-light);
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem auto;
        border-left: 4px solid var(--primary-color);
        }

        .audio-section {
        background: var(--white);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        margin: 2rem 0;
        }

        .audio-controls {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-top: 1rem;
        }

        .control-btn {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        border: none;
        background: var(--primary-color);
        color: var(--white);
        cursor: pointer;
        transition: all 0.3s ease;
        }

        .control-btn:hover {
        background: var(--primary-dark);
        transform: scale(1.05);
        }

        .audio-progress {
        flex: 1;
        height: 6px;
        background: var(--bg-light);
        border-radius: 3px;
        cursor: pointer;
        }

        .audio-progress-bar {
        height: 100%;
        background: var(--primary-color);
        border-radius: 3px;
        transition: width 0.1s linear;
        }

        .question-card {
        background: var(--white);
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .option {
        margin: 0.8rem 0;
        padding: 0.8rem;
        border-radius: 8px;
        background: var(--bg-light);
        transition: all 0.3s ease;
        }

        .option:hover {
        background: #fff1e6;
        }

        .btn-primary {
        background: var(--primary-color);
        color: var(--white);
        border: none;
        padding: 0.8rem 2rem;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        }

        .btn-primary:hover {
        background: var(--primary-dark);
        transform: translateY(-2px);
        }

        .score-summary {
        background: var(--bg-light);
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        margin-top: 2rem;
        }

        .bottom-navigation {
        display: flex;
        justify-content: space-between;
        margin-top: 2rem;
        }

        .nav-btn {
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        text-decoration: none;
        transition: all 0.3s ease;
        }

        .nav-btn.prev {
        background: var(--bg-light);
        color: var(--text-dark);
        }

        .nav-btn.next {
        background: var(--primary-color);
        color: var(--white);
        }

        .nav-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        /* MCQ Section Styles */
        .mcq-section {
            margin: 2rem 0;
            padding: 1.5rem;
            background: #f8f9fa;
            border-radius: 15px;
            border-left: 4px solid var(--primary-color);
        }

        .mcq-container {
            max-width: 600px;
            margin: 0 auto;
        }

        .mcq-container h3 {
            color: var(--primary-color);
            margin-bottom: 1rem;
            font-size: 1.3rem;
        }

        .mcq-question {
            font-size: 1.1rem;
            color: var(--text-dark);
            margin-bottom: 1.5rem;
            font-weight: 500;
        }

        .question-item {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            border-left: 3px solid var(--primary-color);
        }

        .question-item h4 {
            color: var(--primary-color);
            margin-bottom: 1rem;
            font-size: 1rem;
        }

        .mcq-options {
            display: flex;
            flex-direction: column;
            gap: 0.8rem;
            margin-bottom: 1rem;
        }

        .mcq-option {
            display: flex;
            align-items: center;
            padding: 0.8rem;
            background: var(--bg-light);
            border-radius: 8px;
            border: 2px solid #e0e0e0;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .mcq-option:hover {
            border-color: var(--primary-color);
            background: #fff1e6;
        }

        .mcq-option input[type="radio"] {
            margin-right: 0.8rem;
            transform: scale(1.2);
        }

        .mcq-option label {
            cursor: pointer;
            font-size: 1rem;
            color: var(--text-dark);
            flex: 1;
        }

        .mcq-actions {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 2rem;
        }

        .btn-secondary {
            background: var(--text-light);
            color: var(--white);
            border: none;
            padding: 0.8rem 2rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-secondary:hover {
            background: #6c757d;
            transform: translateY(-2px);
        }

        .mcq-feedback {
            margin-top: 2rem;
            padding: 1.5rem;
            border-radius: 10px;
            background: white;
            border-left: 4px solid var(--primary-color);
        }

        .feedback-summary {
            text-align: center;
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: var(--bg-light);
            border-radius: 8px;
        }

        .feedback-summary h4 {
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .score-display {
            font-size: 2rem;
            font-weight: bold;
            color: var(--primary-color);
        }

        .question-feedback {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .question-result {
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid;
        }

        .question-result.correct {
            background: #d4edda;
            border-left-color: #28a745;
        }

        .question-result.incorrect {
            background: #f8d7da;
            border-left-color: #dc3545;
        }

        .question-result h5 {
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        .question-result.correct h5 {
            color: #155724;
        }

        .question-result.incorrect h5 {
            color: #721c24;
        }

        .mcq-option.correct-answer {
            background: #d4edda !important;
            border-color: #28a745 !important;
            color: #155724;
        }

        .mcq-option.incorrect-answer {
            background: #f8d7da !important;
            border-color: #dc3545 !important;
            color: #721c24;
        }

        .mcq-option input[type="radio"]:disabled + label {
            cursor: not-allowed;
            opacity: 0.7;
        }
    </style>

@section Scripts {
    <script>
        let audioPlayer;
        let playPauseBtn;
        let progressBar;
        let currentTimeSpan;
        let durationSpan;

        document.addEventListener('DOMContentLoaded', function() {
            initializeAudio();
            loadListeningAudio();
            initializeMCQ();
        });

        function initializeAudio() {
            audioPlayer = document.getElementById('listeningAudio');
            playPauseBtn = document.getElementById('playPauseBtn');
            progressBar = document.getElementById('audioProgressBar');
            currentTimeSpan = document.getElementById('currentTime');
            durationSpan = document.getElementById('duration');

            // Play/Pause button
            playPauseBtn.addEventListener('click', togglePlay);

            // Audio event listeners
            audioPlayer.addEventListener('play', updatePlayButton);
            audioPlayer.addEventListener('pause', updatePlayButton);
            audioPlayer.addEventListener('timeupdate', updateProgress);
            audioPlayer.addEventListener('loadedmetadata', () => {
                durationSpan.textContent = formatTime(audioPlayer.duration);
            });
            audioPlayer.addEventListener('ended', () => {
                ;
            });

            // Progress bar click
            document.getElementById('audioProgress').addEventListener('click', function(e) {
                const percent = e.offsetX / this.offsetWidth;
                audioPlayer.currentTime = percent * audioPlayer.duration;
            });
        }

        async function loadListeningAudio() {
            try {
                const audioData = @Html.Raw(Json.Serialize(ViewBag.AudioData));
                if (!audioData) {
                    throw new Error('Audio data is not available');
                }
                
                // Convert Base64 to Blob
                const base64Data = audioData.split(',')[1];
                const byteCharacters = atob(base64Data);
                const byteNumbers = new Array(byteCharacters.length);
                
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'audio/mp3' });
                const audioUrl = URL.createObjectURL(blob);
                
                audioPlayer.src = audioUrl;
                audioPlayer.load();
                
                // Show audio controls after loading
                audioPlayer.style.display = 'none'; // Keep the native audio element hidden
                document.querySelector('.audio-controls').style.display = 'flex';
                
                // Clean up the URL when the audio is loaded
                audioPlayer.onload = () => {
                    URL.revokeObjectURL(audioUrl);
                };
                
            } catch (error) {
                console.error('Error loading audio:', error);
            }
        }

        function togglePlay() {
            if (audioPlayer.paused) {
                audioPlayer.play();
            } else {
                audioPlayer.pause();
            }
        }

        function updatePlayButton() {
            playPauseBtn.innerHTML = audioPlayer.paused ? 
                '<i class="fas fa-play"></i>' : 
                '<i class="fas fa-pause"></i>';
        }

        function updateProgress() {
            const percent = (audioPlayer.currentTime / audioPlayer.duration) * 100;
            progressBar.style.width = percent + '%';
            currentTimeSpan.textContent = formatTime(audioPlayer.currentTime);
        }

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            seconds = Math.floor(seconds % 60);
            return `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }

        function initializeMCQ() {
            // Add event listeners for check answers button
            document.getElementById('checkAnswers').addEventListener('click', checkAllAnswers);
            document.getElementById('showResults').addEventListener('click', showDetailedResults);
        }

        function checkAllAnswers() {
            const questions = [1, 2, 3, 4];
            let correctAnswers = 0;
            let totalQuestions = questions.length;
            let questionResults = [];

            questions.forEach(questionNum => {
                const selectedOption = document.querySelector(`input[name="q${questionNum}"]:checked`);
                const questionItem = document.querySelector(`[data-question="${questionNum}"]`).closest('.question-item');
                
                if (selectedOption) {
                    const mcqOption = selectedOption.closest('.mcq-option');
                    const isCorrect = mcqOption.dataset.correct === 'true';
                    
                    if (isCorrect) {
                        correctAnswers++;
                        mcqOption.classList.add('correct-answer');
                        questionResults.push({
                            question: questionNum,
                            correct: true,
                            message: `Question ${questionNum}: Correct!`
                        });
                    } else {
                        mcqOption.classList.add('incorrect-answer');
                        // Highlight correct answer
                        const correctOption = questionItem.querySelector('[data-correct="true"]');
                        correctOption.classList.add('correct-answer');
                        questionResults.push({
                            question: questionNum,
                            correct: false,
                            message: `Question ${questionNum}: Incorrect. The correct answer is highlighted.`
                        });
                    }
                    
                    // Disable all options for this question
                    questionItem.querySelectorAll('input[type="radio"]').forEach(option => {
                        option.disabled = true;
                    });
                } else {
                    questionResults.push({
                        question: questionNum,
                        correct: false,
                        message: `Question ${questionNum}: No answer selected.`
                    });
                }
            });

            // Calculate score
            const score = Math.round((correctAnswers / totalQuestions) * 100);
            
            // Show feedback
            showFeedback(score, correctAnswers, totalQuestions, questionResults);
            
            // Disable check answers button and show results button
            document.getElementById('checkAnswers').disabled = true;
            document.getElementById('checkAnswers').style.opacity = '0.5';
            document.getElementById('showResults').style.display = 'inline-block';
        }

        function showFeedback(score, correct, total, questionResults) {
            const feedbackDiv = document.querySelector('.mcq-feedback');
            const summaryDiv = feedbackDiv.querySelector('.feedback-summary');
            const questionFeedbackDiv = feedbackDiv.querySelector('.question-feedback');
            
            // Show summary
            summaryDiv.innerHTML = `
                <h4><i class="fas fa-chart-bar"></i> Test Results</h4>
                <div class="score-display">${score}%</div>
                <p>You got ${correct} out of ${total} questions correct.</p>
            `;
            
            // Show individual question results
            questionFeedbackDiv.innerHTML = '';
            questionResults.forEach(result => {
                const resultClass = result.correct ? 'correct' : 'incorrect';
                const icon = result.correct ? 'fas fa-check-circle' : 'fas fa-times-circle';
                
                questionFeedbackDiv.innerHTML += `
                    <div class="question-result ${resultClass}">
                        <h5><i class="${icon}"></i> ${result.message}</h5>
                    </div>
                `;
            });
            
            feedbackDiv.style.display = 'block';
        }

        function showDetailedResults() {
            // This function can be expanded to show more detailed analysis
            alert('Detailed results analysis will be implemented here.');
        }
    </script>
}