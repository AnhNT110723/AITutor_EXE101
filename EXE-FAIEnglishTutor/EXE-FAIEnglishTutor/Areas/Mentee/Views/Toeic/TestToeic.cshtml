@{
    Layout = "_Layout";
    ViewData["Title"] = "Test TOEIC";
}

<!-- Page Content -->
<div id="content" class="p-4 p-md-5">
    <div class="sticky-wrapper-h110">
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-fluid">
                <button type="button" id="sidebarCollapse" class="btn btn-sidebar-custom">
                    <i class="fa fa-bars"></i>
                    <span class="sr-only">Toggle Menu</span>
                </button>
                <button class="btn btn-dark d-inline-block d-lg-none ml-auto" type="button" 
                        data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <i class="fa fa-bars"></i>
                </button>
                <button class="btn btn-start" style="background-color: #0d6efd;" onclick="submitExam()">
                    <span>Nộp Bài</span>
                </button>
            </div>
        </nav>
    </div>

    <!-- Khối lệnh Question -->
    <div class="content-container">
        <div class="container mt-4">
            <div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
                <h4 class="fw-bold text-primary" id="part-name">PART 1</h4>
                <div style="display:flex;">
                    <div id="timer-display" class="score-box"></div>
                    <button class="btn btn-start" style="margin-bottom: 20px;">
                        <span id="progress">0/200</span>
                    </button>
                </div>
            </div>
            <div class="row border p-3" id="question-container"></div>
        </div>
    </div>
</div>

<!-- Lớp Overlay -->
<div class="overlay" id="overlay"></div>

@section Scripts {
    <style>
        .btn-test-online {
            display: inline-block;
            background-color: #4CAF50;
            color: white;
            font-size: 14px;
            font-weight: bold;
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            text-decoration: none;
            text-transform: uppercase;
            transition: 0.3s ease-in-out;
            box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.2);
        }

        .btn-test-online:hover {
            background-color: #45a049;
            color: white;
            transform: scale(1.05);
        }

        .navbar {
            position: unset;
            border-radius: 10px;
            top: 1 !important;
            width: 100% !important;
            margin-top: -30px;
        }

        body {
            background-color: #f8f9fa;
        }

        .part-title {
            font-weight: bold;
            color: #0d6efd;
        }

        .test-container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            max-width: 800px;
            margin: auto;
            overflow-y: auto;
            max-height: 500px;
            border: 1px solid #ddd;
        }

        .test-title {
            text-align: center;
            font-weight: bold;
        }

        .test-content {
            font-size: 16px;
            line-height: 1.5;
        }

        .test-image {
            width: 100%;
            display: block;
            margin: 10px auto;
            border-radius: 8px;
        }

        .start-btn {
            display: block;
            width: 150px;
            margin: 20px auto;
            padding: 10px;
            background-color: #ffcc66;
            border: none;
            font-weight: bold;
            border-radius: 5px;
            cursor: pointer;
        }

        .score-box {
            color: black;
            padding: 10px 15px;
            font-weight: bold;
            border-radius: 5px;
        }

        .btn-start {
            background-color: #FFA53A;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .btn-start:hover {
            background-color: #FFA53A;
        }

        #hidden-input {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }
    </style>

    <script>
        const questions = @Html.Raw(Json.Serialize(Model));
        let currentQuestionIndex = 0;
        let audio = new Audio();
        let answers = {};
        let startTime = Date.now();
        let timeLeft;

        function displayQuestion(index) {
            const question = questions[index];
            const partName = document.getElementById('part-name');
            const progress = document.getElementById('progress');
            const container = document.getElementById('question-container');

            partName.textContent = question.partName;
            progress.textContent = `${index + 1}/${questions.length}`;

            let html = `
                <div class="col-md-6">
                    <p class="fw-bold">Câu hỏi ${index + 1}: </p>
                    <br>
            `;
            if (question.imageUrl) {
                html += `<img src="${question.imageUrl}" alt="Câu hỏi hình ảnh" class="test-image">`;
            }
            html += `</div>
                <div class="col-md-6">
                    <p class="fw-bold">${index + 1}.</p>
                    <form>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="answer${index}" id="optionA${index}" value="A" onchange="saveAnswer(${question.questionId}, 'A')">
                            <label class="form-check-label" for="optionA${index}">A. ${question.answerA || ''}</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="answer${index}" id="optionB${index}" value="B" onchange="saveAnswer(${question.questionId}, 'B')">
                            <label class="form-check-label" for="optionB${index}">B. ${question.answerB || ''}</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="answer${index}" id="optionC${index}" value="C" onchange="saveAnswer(${question.questionId}, 'C')">
                            <label class="form-check-label" for="optionC${index}">C. ${question.answerC || ''}</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="answer${index}" id="optionD${index}" value="D" onchange="saveAnswer(${question.questionId}, 'D')">
                            <label class="form-check-label" for="optionD${index}">D. ${question.answerD || ''}</label>
                        </div>
                    </form>
            `;
            if (question.partType === 'Reading') {
                html += `
                    <button onclick="nextQuestion()" class="btn btn-primary mt-3">Tiếp theo</button>
                `;
            }
            html += `</div>`;
            container.innerHTML = html;

            if (question.partType === 'Listening' && question.audioUrl) {
                audio.src = question.audioUrl;
                audio.play();
            }
        }

        function saveState() {
            try {
                localStorage.setItem('toeicExamState', JSON.stringify({
                    examId: @ViewData["ExamId"],
                    startTime: startTime,
                    currentQuestionIndex: currentQuestionIndex,
                    answers: answers
                }));
                console.log('State saved to localStorage');
            } catch (error) {
                console.error('Error saving state:', error);
            }
        }

        function restoreState() {
            try {
                const savedState = localStorage.getItem('toeicExamState');
                if (savedState) {
                    const state = JSON.parse(savedState);
                    if (state.examId == @ViewData["ExamId"]) {
                        startTime = state.startTime || Date.now();
                        currentQuestionIndex = state.currentQuestionIndex || 0;
                        answers = state.answers || {};
                        const elapsedTime = Math.floor((Date.now() - startTime) / 1000);
                        timeLeft = 7200 - elapsedTime;
                        if (timeLeft < 0) {
                            timeLeft = 0;
                            localStorage.removeItem('toeicExamState');
                        }
                        console.log('State restored:', { startTime, currentQuestionIndex, timeLeft });
                    } else {
                        localStorage.removeItem('toeicExamState');
                        startTime = Date.now();
                        timeLeft = 7200;
                    }
                } else {
                    startTime = Date.now();
                    timeLeft = 7200;
                }
            } catch (error) {
                console.error('Error restoring state:', error);
                startTime = Date.now();
                timeLeft = 7200;
            }
        }

        function saveAnswer(questionId, selectedAnswer) {
            answers[questionId] = selectedAnswer;
            saveState();
            console.log(`Saved answer for question ${questionId}: ${selectedAnswer}`);
        }

        function nextQuestion() {
            currentQuestionIndex++;
            if (currentQuestionIndex < questions.length) {
                displayQuestion(currentQuestionIndex);
                saveState();
            } else {
                submitExam();
            }
        }

        audio.onended = function () {
            if (questions[currentQuestionIndex].partType === 'Listening') {
                nextQuestion();
            }
        };

        async function submitExam() {
            // Bước 1: Xác nhận người dùng muốn nộp bài
            if (!confirm('Bạn có chắc muốn nộp bài không?')) {
                console.log('User canceled exam submission');
                return; // Thoát nếu người dùng hủy
            }

            // Bước 2: Kiểm tra dữ liệu trước khi gửi
            const examId = @ViewData["ExamId"];
            if (!examId) {
                alert('Lỗi: Không tìm thấy ID bài thi. Vui lòng thử lại.');
                console.error('Exam ID is missing');
                return;
            }
            if (!answers || Object.keys(answers).length === 0) {
                alert('Bạn chưa trả lời câu hỏi nào. Vui lòng chọn ít nhất một đáp án.');
                console.warn('No answers provided');
                return;
            }

            // Bước 3: Log dữ liệu gửi đi để debug
            console.log('Submitting exam:', { examId, answers });

            try {
                // Bước 4: Gửi yêu cầu POST đến server
                const response = await fetch('/Mentee/Toeic/SubmitExam', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        examId: examId,
                        answers: answers // answers là object dạng { questionId: answer }
                    })
                });

                // Bước 5: Kiểm tra phản hồi từ server
                if (response.ok) {
                    const result = await response.json();
                    // Kiểm tra xem server có trả về score không
                    if (result && typeof result.score !== 'undefined') {
                        // Bước 6: Hiển thị điểm số và thông tin bổ sung (nếu có)
                        const message = `Hoàn thành bài thi! Điểm số: ${result.score}` +
                            (result.correctCount ? `\nSố câu đúng: ${result.correctCount}/${questions.length}` : '');
                        alert(message);
                        console.log('Exam submitted successfully:', result);

                        // Bước 7: Xóa trạng thái lưu trữ
                        localStorage.removeItem('toeicExamState');
                        sessionStorage.removeItem('isReloading');

                        // Bước 8: Chuyển hướng đến trang kết quả
                        window.location.href = `/Mentee/Toeic/Result/${examId}`;
                    } else {
                        alert('Lỗi: Server không trả về điểm số hợp lệ.');
                        console.error('Invalid response from server:', result);
                    }
                } else {
                    // Bước 9: Xử lý lỗi từ server
                    const errorText = await response.text();
                    alert(`Có lỗi khi gửi kết quả: ${errorText || 'Không rõ nguyên nhân'}. Vui lòng thử lại.`);
                    console.error('Server error:', response.status, errorText);
                }
            } catch (error) {
                // Bước 10: Xử lý lỗi mạng hoặc ngoại lệ
                alert('Có lỗi xảy ra khi gửi bài thi. Vui lòng kiểm tra kết nối và thử lại.');
                console.error('Error submitting exam:', error);
            }
        }

        window.addEventListener('beforeunload', function (e) {
            if (timeLeft > 0) {
                // SỬA: Lưu thời gian rời trang để phát hiện reload gần đây
                sessionStorage.setItem('reloadTimestamp', Date.now());
                const confirmationMessage = 'Thao tác này có thể không được lưu. Bạn có chắc muốn thoát?';
                (e || window.event).returnValue = confirmationMessage;
                return confirmationMessage;
            } else {
                // SỬA: Xóa reloadTimestamp nếu thời gian hết
                sessionStorage.removeItem('reloadTimestamp');
            }
        });




        window.onload = function () {

            // SỬA: Dùng performance.navigation.type để phát hiện reload
            const navigationType = performance.navigation.type;
            console.log('Navigation type:', navigationType); // 0: bình thường, 1: reload
            const reloadTimestamp = sessionStorage.getItem('reloadTimestamp');
            const currentTime = Date.now();
            console.log('reloadTimestamp:', reloadTimestamp, 'Current time:', currentTime);

            // SỬA: Kiểm tra reload (type === 1) và timestamp gần đây (< 5 giây)
            if (navigationType === 1 && reloadTimestamp && (currentTime - reloadTimestamp < 5000)) {
                console.log('Detected recent reload, attempting to navigate back');
                sessionStorage.removeItem('reloadTimestamp');
                if (window.history.length > 1) {
                    console.log('History available, navigating back');
                    window.history.back();
                } else {
                    console.log('No history, redirecting to /Mentee/Toeic');
                    window.location.href = '/Mentee/Toeic';
                }
                return;
            } else {
                // SỬA: Xóa reloadTimestamp nếu không phải reload hoặc timestamp cũ
                sessionStorage.removeItem('reloadTimestamp');
                console.log('Not a reload or stale timestamp, proceeding normally');
            }

            const hiddenInput = document.createElement('input');
            hiddenInput.id = 'hidden-input';
            hiddenInput.type = 'text';
            document.body.appendChild(hiddenInput);
            const clickEvent = new Event('click', { bubbles: true });
            const changeEvent = new Event('change', { bubbles: true });
            const inputEvent = new Event('input', { bubbles: true });
            hiddenInput.dispatchEvent(clickEvent);
            hiddenInput.dispatchEvent(changeEvent);
            hiddenInput.dispatchEvent(inputEvent);
            console.log('Simulated interaction by triggering click, change, and input events');

            if (questions && questions.length > 0) {
                restoreState();
                console.log('Questions loaded:', questions.length);
                displayQuestion(currentQuestionIndex);
                startTimer();
            } else {
                console.error('No questions available');
                document.getElementById('question-container').innerHTML = '<p>Không có câu hỏi nào.</p>';
            }
        };

        function startTimer() {
            const timerDisplay = document.getElementById('timer-display');
            console.log('Starting timer, initial timeLeft:', timeLeft);
            const timer = setInterval(() => {
                const elapsedTime = Math.floor((Date.now() - startTime) / 1000);
                timeLeft = 7200 - elapsedTime;
                console.log('Timer tick, timeLeft:', timeLeft);
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    timeLeft = 0;
                    timerDisplay.textContent = 'Time: 0:00';
                    localStorage.removeItem('toeicExamState');
                    // SỬA: Thêm xóa cờ isReloading khi hết thời gian
                    sessionStorage.removeItem('isReloading');
                    alert('Hết thời gian làm bài!');
                    submitExam();
                    return;
                }
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                timerDisplay.textContent = `Time: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            }, 1000);
        }
    </script>

    <script>
        const phoneInput = document.querySelector("#phone");
        const iti = window.intlTelInput(phoneInput, {
            initialCountry: "vn",
            preferredCountries: ["vn", "us", "gb"],
            separateDialCode: true,
            allowDropdown: true,
            utilsScript: "static/intl-tel-input/js/utils.js",
        });

        function submitPhone() {
            if (iti.isValidNumber()) {
                const fullNumber = iti.getNumber();
                document.getElementById("result").innerText = `Số điện thoại đã lưu: ${fullNumber}`;
            } else {
                alert("Số điện thoại không hợp lệ. Vui lòng kiểm tra lại!");
            }
        }
    </script>
}