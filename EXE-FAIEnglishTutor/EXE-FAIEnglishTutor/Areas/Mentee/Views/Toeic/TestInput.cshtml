@{
    Layout = "_Layout";
}
@model List<ExamPartDto>

@{
    ViewData["Title"] = "Test Input";
}

<!-- Page Content  -->
<div id="content" class="p-4 p-md-5">
    <div class="sticky-wrapper-h110">
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-fluid">

                <button type="button" id="sidebarCollapse" class="btn btn-sidebar-custom ">
                    <i class="fa fa-bars"></i>
                    <span class="sr-only">Toggle Menu</span>
                </button>
                <button class="btn btn-dark d-inline-block d-lg-none ml-auto" type="button"
                        data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <i class="fa fa-bars"></i>
                </button>

            </div>
        </nav>

    </div>
    <!-- Khối lệnh tư vấn -->
    <div class="container-content mg-top-20">
        <h5 class="fw-bold" id="exam-title">@ViewData["ExamTitle"]</h5>
        <div>
            <p><strong>Thời gian làm bài thi:</strong> <span class="text-danger">2 giờ</span></p>
            <p><strong>Cấu trúc đề thi</strong></p>

            <div class="test-container">
                <h5 class="section-title">LISTENING</h5>
                <table class="table table-bordered test-table">
                    @{
                        var listeningParts = Model.Where(ep => ep.PartType == "Listening").OrderBy(ep => ep.PartName).ToList();
                        int sttListening = 1;
                    }
                    @if (listeningParts.Any())
                    {
                        @foreach (var part in listeningParts)

                        {
                            var partNumber = part.PartName.Replace("Listening Part ", "");
                            <tr>
                                <td class="stt">@sttListening</td>
                                <td>PART @partNumber</td>
                                <td>@part.QuestionCount CÂU</td>
                            </tr>
                            sttListening++;

                        }
                    }
                    else

                    {
                        <tr>
                            <td colspan="3">Không có phần Listening</td>
                        </tr>
                    }
                </table>

                <h5 class="section-title">READING</h5>
                <table class="table table-bordered test-table">
                    @{
                        var readingParts = Model.Where(ep => ep.PartType == "Reading").OrderBy(ep => ep.PartName).ToList();

                        int sttReading = 1;
                    }
                    @if (readingParts.Any())
                    {
                        @foreach (var part in readingParts)

                        {
                            var partNumber = part.PartName.Replace("Reading Part ", "");
                            <tr>
                                <td class="stt">@sttReading</td>
                                <td>PART @partNumber</td>
                                <td>@part.QuestionCount CÂU</td>
                            </tr>
                            sttReading++;

                        }
                    }
                    else

                    {
                        <tr>
                            <td colspan="3">Không có phần Reading</td>
                        </tr>
                    }
                </table>
                <a asp-controller="Toeic" asp-action="TestToeic" asp-route-examTypeId="@ViewData["ExamTypeId"]" asp-route-slug="@ViewData["Slug"]" class="btn btn-start mt-3">BẮT ĐẦU</a>
            </div>
        </div>


    </div>

</div>


<!-- Lớp Overlay -->
<div class="overlay" id="overlay"></div>
@section Scripts {
    <script src="~/js/slug.js"></script>
    <style>
        .btn-test-online {
            display: inline-block;
            background-color: #4CAF50;
            /* Màu xanh lá */
            color: white;
            font-size: 14px;
            font-weight: bold;
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            /* Bo góc */
            text-decoration: none;
            text-transform: uppercase;
            transition: 0.3s ease-in-out;
            box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.2);
        }

            .btn-test-online:hover {
                background-color: #45a049;
                /* Màu xanh nhạt hơn khi hover */
                color: white;
                transform: scale(1.05);
            }

        .navbar {
            position: unset;
            border-radius: 10px;
            top: 1 !important;
            /* Căn với sidebar mặc định */
            width: 100% !important;
            margin-top: -30px;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
            /*             display: flex;
                     justify-content: center;
                     align-items: center; */
            /* height: 100vh; */
            margin: 0;
        }

        .container {
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
            max-width: 600px;
            width: 100%;
        }

        .table {
            margin: auto;
            width: 100%;
        }

        .btn-start {
            background-color: #FFA53A;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .btn-start:hover {
                background-color: #FFA53A;
            }

        .test-container {
            max-width: 600px;
            margin: auto;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .test-table {
            width: 100%;
            text-align: center;
        }

            .test-table td {
                padding: 10px;
                text-align: center;
                text-align: left;
            }

        .section-title {
            margin: 20px 0;
            font-weight: bold;
            text-align: left;
        }

        .stt {
            background-color: #ffc379 !important;
        }

        /* CSS cho popup */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 5px;
            text-align: center;
        }

        .modal-button {
            padding: 10px 20px;
            margin: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .modal-button.yes {
                background-color: #4CAF50;
                color: white;
            }

            .modal-button.no {
                background-color: #f44336;
                color: white;
            }
    </style>




    <script>

        document.addEventListener("DOMContentLoaded", () => {
            alert("This feature is still under development.")
        })

        window.onload = function () {
            const savedState = localStorage.getItem('toeicExamState');
            if (savedState) {
                // Hiển thị popup nếu có trạng thái thi chưa hoàn thành
                showContinueExamPopup();
            }
        };

        function showContinueExamPopup() {
            // Tạo modal popup
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.id = 'continueExamModal';
            modal.innerHTML = `
                        <div class="modal-content">
                            <h3>Bạn có muốn thi tiếp không?</h3>
                            <p>Bạn đã rời khỏi bài thi trước đó. Bạn có muốn tiếp tục không?</p>
                            <button class="modal-button yes" onclick="continueExam()">Có</button>
                            <button class="modal-button no" onclick="resetExam()">Không</button>
                        </div>
                    `;
            document.body.appendChild(modal);

            // Hiển thị modal
            modal.style.display = 'block';
        }

        function continueExam() {
            // SỬA: Tạo URL giống nút "Bắt đầu" với examTypeId và slug
            const examTypeId = '@ViewData["ExamTypeId"]';
            const slug = '@ViewData["Slug"]';
            const url = `/Mentee/Toeic/TestOnline/StartTest/${examTypeId}/${slug}`;
            console.log('Continuing exam, redirecting to:', url); // Log để debug

            // Đóng modal và chuyển hướng
            const modal = document.getElementById('continueExamModal');
            modal.remove();
            window.location.href = url;
        }

        function resetExam() {
            // Xóa trạng thái thi và làm mới trang
            localStorage.removeItem('toeicExamState');
            localStorage.removeItem('isReloading');
            const modal = document.getElementById('continueExamModal');
            modal.remove();
            window.location.reload();
        }



    </script>
}