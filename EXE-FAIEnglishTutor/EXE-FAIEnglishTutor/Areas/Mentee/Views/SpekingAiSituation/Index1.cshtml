@model ChatViewModel

<h2>English Tutor Speaking Practice</h2>

<div>
    <label for="situation">Select Situation:</label>
    <select id="situation" asp-items="@Model.Situations" onchange="loadSituation()">
        <option value="">-- Choose a situation --</option>
    </select>
</div>

<div id="chatBox" style="border: 1px solid #ccc; height: 400px; overflow-y: scroll; padding: 10px;">
    <!-- Lịch sử trò chuyện -->
</div>

<div>
    <input type="text" id="userInput" placeholder="Type your message or use the mic..." style="width: 70%;" />
    <button onclick="sendMessage()">Send</button>
    <button id="micButton" onclick="toggleRecording()">
        <img src="/images/mic.png" alt="Mic" style="width: 24px;" />
    </button>
</div>

@section Scripts {
    <script>
        let mediaRecorder;
        let audioChunks = [];
        let isRecording = false;

        async function toggleRecording() {
            if (isRecording) {
                mediaRecorder.stop();
                isRecording = false;
                document.getElementById("micButton").style.backgroundColor = "";
            } else {
                try {
                    audioChunks = [];
                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true }); //Yêu cầu quyền truy cập micro từ trình duyệt (sẽ hiện thông báo hỏi người dùng có cho phép không
                    mediaRecorder = new MediaRecorder(stream);
                    mediaRecorder.ondataavailable = (event) => {
                        audioChunks.push(event.data);
                    };
                    mediaRecorder.onstop = async () => {
                        const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                        await sendAudio(audioBlob);
                    };
                    mediaRecorder.start();
                    isRecording = true;
                    document.getElementById("micButton").style.backgroundColor = "red";
                } catch (error) {
                    console.error("Error accessing microphone:", error);
                    alert("Could not access microphone. Please check permissions.");
                    isRecording = false;
                }
            }
        }

        async function sendAudio(audioBlob) {
            const chatBox = document.getElementById("chatBox");
            const situation = document.getElementById("situation").value;

            // Bước 1: Gửi file âm thanh để chuyển thành text
            const formData = new FormData();
            formData.append("audio", audioBlob, "recording.webm");

            try {
                const transcribeResponse = await fetch('/Mentee/SpekingAiSituation/TranscribeAudio', {
                    method: 'POST',
                    body: formData
                });

                if (!transcribeResponse.ok) {
                    throw new Error(`Transcribe error! Status: ${transcribeResponse.status}`);
                }

                const transcribeData = await transcribeResponse.json();
                if (!transcribeData.userMessage) {
                    throw new Error("Could not transcribe audio");
                }

                // Hiển thị câu hỏi của người dùng ngay lập tức
                const userMessage = transcribeData.userMessage;
                chatBox.innerHTML += `<p><strong>You:</strong> ${userMessage}</p>`;
                chatBox.scrollTop = chatBox.scrollHeight;

                // Bước 2: Gửi userMessage để lấy phản hồi AI
                const response = await fetch('/Mentee/SpekingAiSituation/SendMessage', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: userMessage, situation: situation })
                });

                if (!response.ok) {
                    throw new Error(`AI response error! Status: ${response.status}`);
                }

                const data = await response.json();
                if (!data.reply) {
                    throw new Error("Reply not found in response");
                }

                // Hiển thị phản hồi AI từ từ với hiệu ứng đánh chữ
                await typeMessage(data.reply);

                // Phát âm thanh
                if (data.audioUrl) {
                    const audio = new Audio(data.audioUrl);
                    audio.play();
                } else {
                    speak(data.reply);
                }
            } catch (error) {
                console.error("Error in sendAudio:", error);
                chatBox.innerHTML += `<p><strong>Error:</strong> ${error.message}</p>`;
                chatBox.scrollTop = chatBox.scrollHeight;
            }
        }

        async function sendMessage() {
            const userInput = document.getElementById("userInput").value;
            const situation = document.getElementById("situation").value;
            const chatBox = document.getElementById("chatBox");

            if (!userInput) return;

            chatBox.innerHTML += `<p><strong>You:</strong> ${userInput}</p>`;
            document.getElementById("userInput").value = "";
            chatBox.scrollTop = chatBox.scrollHeight;

            try {
                const response = await fetch('/Mentee/SpekingAiSituation/SendMessage', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: userInput, situation: situation })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                if (!data.reply) {
                    throw new Error("Reply not found in response");
                }

                await typeMessage(data.reply);

                if (data.audioUrl) {
                    const audio = new Audio(data.audioUrl);
                    audio.play();
                } else {
                    speak(data.reply);
                }
            } catch (error) {
                console.error("Error in sendMessage:", error);
                chatBox.innerHTML += `<p><strong>Error:</strong> Could not get response from AI. Please try again.</p>`;
                chatBox.scrollTop = chatBox.scrollHeight;
            }
        }

        async function typeMessage(message) {
            const chatBox = document.getElementById("chatBox");
            const aiMessageElement = document.createElement("p");
            aiMessageElement.innerHTML = "<strong>AI:</strong> ";
            chatBox.appendChild(aiMessageElement);
            chatBox.scrollTop = chatBox.scrollHeight;

            const textNode = document.createTextNode("");
            aiMessageElement.appendChild(textNode);

            for (let i = 0; i < message.length; i++) {
                textNode.nodeValue += message[i];
                chatBox.scrollTop = chatBox.scrollHeight;
                await new Promise(resolve => setTimeout(resolve, 50)); // Delay 50ms mỗi ký tự
            }
        }

        function speak(text) {
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'en-US';
            utterance.rate = 1;
            utterance.pitch = 1;
            window.speechSynthesis.speak(utterance);
        }

        function loadSituation() {
            // Có thể gọi API để tải nội dung liên quan tình huống
        }
    </script>
}