@model EXE_FAIEnglishTutor.Models.Podcast
@{
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pronunciation Practice - FAI English</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/style.css">
    <link rel="stylesheet" href="~/css/course-gen.css">
    <style>
        :root {
            --primary-color: #FF6B6B;
            --secondary-color: #4ECDC4;
            --accent-color: #FFE66D;
            --text-color: #2C3E50;
            --background-color: #F7F9FC;
        }

        body {
            background: linear-gradient(120deg, #f6d365 0%, #fda085 100%);
            font-family: 'Segoe UI', 'Arial', sans-serif;
            min-height: 100vh;
            margin: 0;
        }

        .wrapper {
            display: flex;
            min-height: 100vh;
        }

        .main-content {
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 80vh;
            padding: 0.5rem;
            background: linear-gradient(120deg, #f7f9fc 60%, #ffe66d 100%);
        }

        .postcard {
            background: #fff;
            border-radius: 24px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.10);
            padding: 2rem 1.5rem;
            max-width: 800px;
            width: 100%;
            position: relative;
            overflow: hidden;
            margin: 1rem auto;
        }

        .postcard-header h2 {
            color: #ff6701;
            font-size: 2.2rem;
            margin-bottom: 0.5rem;
        }

        .postcard-header p {
            color: #888;
            font-size: 1.1rem;
        }

        .postcard-image-container {
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 20px;
        }

        .postcard-decor {
            width: 100%;
            max-width: 400px;
            height: auto;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .podcast-content-box {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 1.5rem;
            margin-top: 1rem;
            font-size: 1.1rem;
            color: #333;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .audio-visualizer {
            width: 100%;
            height: 50px;
            margin: 2rem 0 1rem 0;
            display: flex;
            align-items: flex-end;
            justify-content: center;
            gap: 5px;
        }

        .bar {
            width: 10px;
            height: 15px;
            background: linear-gradient(180deg, var(--primary-color), var(--secondary-color));
            border-radius: 4px;
            animation: bounce 1s infinite;
            opacity: 0.7;
        }

            .bar:nth-child(1) {
                animation-delay: 0s;
            }

            .bar:nth-child(2) {
                animation-delay: 0.1s;
            }

            .bar:nth-child(3) {
                animation-delay: 0.2s;
            }

            .bar:nth-child(4) {
                animation-delay: 0.3s;
            }

            .bar:nth-child(5) {
                animation-delay: 0.4s;
            }

            .bar:nth-child(6) {
                animation-delay: 0.5s;
            }

            .bar:nth-child(7) {
                animation-delay: 0.6s;
            }

            .bar:nth-child(8) {
                animation-delay: 0.7s;
            }

        @@keyframes bounce {
            0%, 100% {
                height: 15px;
            }

            50% {
                height: 50px;
            }
        }

        @@keyframes highlight {
            0% {
                background: var(--secondary-color);
                color: #fff;
            }

            100% {
                background: var(--primary-color);
                color: #fff;
            }
        }

        .audio-player-custom {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
        }

        .custom-audio-player {
            background: #f5f7fa;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            padding: 16px 24px;
            display: flex;
            flex-direction: column;
            gap: 12px;
            width: 100%;
            max-width: 800px;
        }

        .player-controls {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 16px;
        }

        .player-right {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .audio-btn {
            background: transparent;
            border: none;
            color: #4f8cff;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            font-size: 16px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

            .audio-btn:hover {
                background: rgba(79, 140, 255, 0.1);
            }

            .audio-btn.main-control {
                background: #4f8cff;
                color: white;
                width: 48px;
                height: 48px;
                font-size: 20px;
            }

                .audio-btn.main-control:hover {
                    background: #2563eb;
                    transform: scale(1.05);
                }

        .progress-container {
            flex: 1;
            position: relative;
            width: 100%;
        }

        .audio-progress {
            width: 100% !important;
            height: 4px;
            border-radius: 2px;
            background: #e2e8f0;
            cursor: pointer;
        }

            .audio-progress::-webkit-slider-thumb {
                -webkit-appearance: none;
                width: 12px;
                height: 12px;
                border-radius: 50%;
                background: #4f8cff;
                cursor: pointer;
                border: none;
                margin-top: -4px;
            }

        .player-center {
            display: flex;
            align-items: center;
            gap: 12px;
            width: 100%;
        }

        .progress-tooltip {
            position: absolute;
            background: #333;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            display: none;
            pointer-events: none;
        }

        .volume-control {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .volume-slider {
            width: 80px;
            height: 4px;
        }

        .playlist-container {
            position: fixed;
            right: -340px;
            top: 0;
            width: 340px;
            height: 100vh;
            background: #fffbea;
            box-shadow: -4px 0 24px rgba(255,107,107,0.10);
            border-top-left-radius: 24px;
            border-bottom-left-radius: 24px;
            transition: right 0.3s cubic-bezier(.4,2,.6,1);
            z-index: 1000;
            display: flex;
            flex-direction: column;
        }

            .playlist-container.active {
                right: 0;
            }

        .playlist-header {
            padding: 20px 24px 12px 24px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 2px solid #ffe66d;
            background: #fffbea;
            border-top-left-radius: 24px;
        }

            .playlist-header h3 {
                font-size: 1.3rem;
                color: var(--primary-color);
                font-weight: bold;
                margin: 0;
                letter-spacing: 1px;
            }

        .close-btn {
            background: #ffe66d;
            border: none;
            cursor: pointer;
            font-size: 22px;
            color: #ff6b6b;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.2s;
        }

            .close-btn:hover {
                background: #ff6b6b;
                color: #fff;
            }

        .playlist-items {
            padding: 16px;
            overflow-y: auto;
            flex: 1;
        }

        .playlist-item {
            padding: 16px;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 16px;
            margin-bottom: 12px;
            background: #fff;
            border: 1px solid #ffe66d;
            box-shadow: 0 2px 8px rgba(255,230,109,0.1);
        }

            .playlist-item:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(255,230,109,0.2);
                background: #fffbea;
            }

            .playlist-item.active {
                background: linear-gradient(90deg, #ff6b6b 0%, #ffe66d 100%);
                color: white;
                border-color: #ff6b6b;
            }

            .playlist-item-icon {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background: #ffe66d;
                display: flex;
                align-items: center;
                justify-content: center;
                color: #ff6b6b;
                font-size: 1.2rem;
            }

            .playlist-item.active .playlist-item-icon {
                background: white;
            }

            .playlist-item-content {
                flex: 1;
            }

            .playlist-item-title {
                font-weight: 600;
                margin-bottom: 4px;
                font-size: 1.1rem;
            }

            .playlist-item-description {
                font-size: 0.9rem;
                color: #666;
                display: -webkit-box;
                -webkit-line-clamp: 2;
                -webkit-box-orient: vertical;
                overflow: hidden;
            }

            .playlist-item.active .playlist-item-description {
                color: rgba(255, 255, 255, 0.9);
            }

            .playlist-item-duration {
                font-size: 0.9rem;
                color: #888;
                padding-left: 12px;
            }

            .playlist-item.active .playlist-item-duration {
                color: rgba(255, 255, 255, 0.9);
            }

        @@media (max-width: 768px) {
            #sidebar {
                min-width: 70px;
                max-width: 70px;
                padding: 1rem 0.3rem;
            }

            .btn-sidebar-custom {
                font-size: 1rem;
                padding: 0.5rem;
            }

            .playlist-container {
                width: 100vw;
                right: -100vw;
                border-radius: 0;
            }

                .playlist-container.active {
                    right: 0;
                }

            .playlist-header {
                border-radius: 0;
            }

            .main-content {
                padding: 0.5rem;
            }

            .postcard {
                padding: 1.5rem 1rem;
                max-width: 90%;
            }

            .postcard-header h2 {
                font-size: 1.8rem;
            }

            .postcard-header p {
                font-size: 1rem;
            }

            .audio-visualizer {
                height: 40px;
            }

            .bar {
                width: 8px;
            }

            @@keyframes bounce {
                0%, 100% {
                    height: 15px;
                }

                50% {
                    height: 40px;
                }
            }

            .postcard-decor {
                width: 100%;
                max-width: 800px;
                height: auto;
                border-radius: 12px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            }

            .audio-progress {
                width: 150px;
            }
        }

        .btn-login-custom {
            background-color: black;
            color: white;
            border-color: aqua;
            padding-bottom: 10px;
        }

            .btn-login-custom:hover {
                color: white;
                /* Phóng to nhẹ khi hover */
                transform: scale(1.05);
            }
        /* Popup audio player bar bottom */
        .podcast-popup-player {
            display: none;
            position: fixed;
            left: 50%;
            bottom: 18px;
            transform: translateX(-50%);
            background: linear-gradient(90deg, #67334f 60%, #ad5973 100%);
            color: #fff;
            min-width: 340px;
            max-width: 540px;
            width: 90vw;
            border-radius: 18px;
            box-shadow: 0 6px 32px rgba(0,0,0,0.2);
            padding: 18px 28px 18px 24px;
            z-index: 9999;
            transition: bottom 0.22s, opacity 0.16s;
            opacity: 0;
            pointer-events: none;
        }

            .podcast-popup-player.active {
                display: flex;
                opacity: 1;
                pointer-events: all;
                bottom: 28px;
                animation: popupFadeIn 0.3s;
            }

        @@keyframes popupFadeIn {
            from {
                opacity: 0;
                transform: translateX(-50%) translateY(60px);
            }

            to {
                opacity: 1;
                transform: translateX(-50%) translateY(0);
            }
        }

        .podcast-popup-player .popup-close {
            position: absolute;
            top: 8px;
            right: 16px;
            background: none;
            border: none;
            font-size: 1.6rem;
            color: #fff;
            opacity: 0.8;
            cursor: pointer;
            transition: color 0.18s;
        }

        .podcast-popup-player .popup-close:hover {
            color: #ffd6de;
        }

        .podcast-popup-player .popup-title {
            font-size: 1.12rem;
            font-weight: 600;
            margin-bottom: 7px;
            color: #fff;
            text-shadow: 1px 1px 4px #2d1527b3;
        }

        .podcast-popup-player .popup-controls {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .podcast-popup-player .popup-progress {
            flex: 1;
            margin: 0 18px;
            accent-color: #fff3;
        }

        .podcast-popup-player .popup-time {
            font-size: 0.98rem;
            min-width: 58px;
        }

        .podcast-popup-player .popup-play {
            background: none;
            border: none;
            color: #fff;
            font-size: 1.8rem;
            cursor: pointer;
            margin-right: 8px;
        }

            .podcast-popup-player .popup-play:active {
                color: #ffe66d;
            }

        .podcast-popup-player .popup-speed {
            font-size: 1rem;
            background: none;
            border: none;
            color: #ffd6de;
            margin-left: 6px;
            cursor: pointer;
        }

        @@media (max-width: 600px) {
            .podcast-popup-player {
                padding: 14px 8px 14px 12px;
                min-width: 0;
            }

                .podcast-popup-player .popup-title {
                    font-size: 0.98rem;
                }
        }

        #progressBar {
            accent-color: #ff9838;
            height: 4px;
        }

        .podcast-popup-bar {
            position: fixed;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 9999;
            background: #fffbe7;
            box-shadow: 0 -2px 16px rgba(0,0,0,0.08);
            padding: 0.5rem 1rem;
            display: none;
            align-items: center;
            transition: box-shadow 0.2s;
        }
        .podcast-popup-bar .script-current {
            font-weight: bold;
            margin: 0 1rem;
            max-width: 40vw;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        @@media (max-width: 600px) {
            .podcast-popup-bar .script-current { max-width: 60vw; font-size: 0.9em; }
        }
        #progressBar, #popupProgressBar {
            accent-color: #ff9838;
            height: 4px;
        }
    </style>
</head>

<body>
   

    <!-- Page Content  -->
    <div id="content" class="p-4 p-md-5 home">

        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-fluid">

                <button type="button" id="sidebarCollapse" class="btn btn-sidebar-custom ">
                    <i class="fa fa-bars"></i>
                    <span class="sr-only">Toggle Menu</span>
                </button>
                <button class="btn btn-dark d-inline-block d-lg-none ml-auto" type="button" data-toggle="collapse"
                        data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                        aria-label="Toggle navigation">
                    <i class="fa fa-bars"></i>
                </button>

                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="nav navbar-nav ml-auto">
                        @*  <li class="nav-item active">
                            <a class="nav-link" href="home.html">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">About</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Portfolio</a>
                        </li> *@
                        @if (User.Identity.IsAuthenticated)
                        {
                            // Đọc thông tin từ cookie
                            var fullName = User.Identity.Name;
                            var avatarUrl = User.FindFirst("Avatar")?.Value;
                            <li class="nav-item dropdown">

                                <a class="nav-link dropdown-toggle nav-link-avatar" href="#" id="avatarDropdown" role="button"
                                   data-toggle="dropdown" aria-expanded="false">
                                    <div class="nav-img">
                                        <img src="@avatarUrl" alt="Avatar" class="img-fluid" style="border-radius: 50%;">
                                    </div>
                                </a>
                                <div class=" menu-items dropdown-menu dropdown-menu-right" aria-labelledby="avatarDropdown">
                                    <div class="menu-title">
                                        <h6 class="dropdown-header">Hello, <span>@fullName</span></h6>
                                    </div>
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item" asp-area="Mentee" asp-controller="Profile" asp-action="index">
                                        <i class="bi bi-person-circle"></i> View Profile
                                    </a>
                                    <div class="dropdown-divider"></div>
                                    <a id="logout-link" class="dropdown-item text-danger" href="#">
                                        <i class="bi bi-box-arrow-right"></i> <span id="logoutOption">Logout</span>
                                    </a>

                                    <form id="logoutForm" asp-controller="Account" asp-action="Logout" method="post" style="display: none;"></form>

                                </div>
                            </li>
                        }
                        else
                        {
                            <a class="btn-login-custom btn " asp-controller="Account" asp-action="Login">Login now</a>
                        }
                    </ul>
                </div>
            </div>
        </nav>
        <div class="main-content">
            <div class="postcard shadow-lg position-relative">
                <div class="postcard-header text-center mb-3">
                    <h2 class="fw-bold text-primary">@Model.Title</h2>
                    <p class="text-muted">@Model.CreatedAt.ToString("MMM dd, yyyy")</p>
                </div>
                <div class="audio-player-custom">
                    <div class="postcard-image-container mb-3">
                        <img src="@(string.IsNullOrEmpty(Model.ImageUrl) ? Url.Content("~/Images/default-podcast.jpg") : Model.ImageUrl)" alt="Decor" class="postcard-decor">
                    </div>
                    <div class="custom-audio-player">
                        <div style="margin: 1rem 0;">
                            <div style="display:flex;align-items:center;gap:1rem;">
                                <button id="prevBtn" class="btn btn-secondary btn-sm"><i class="fas fa-backward"></i></button>
                                <button id="playPauseBtn" class="btn btn-success btn-sm"><i class="fas fa-play"></i></button>
                                <button id="nextBtn" class="btn btn-secondary btn-sm"><i class="fas fa-forward"></i></button>
                                <span id="currentTimeLabel">0:00</span>
                                <input id="progressBar" type="range" min="0" max="100" value="0" style="flex:1;">
                                <span id="totalTimeLabel">0:00</span>
                            </div>
                        </div>
                        <audio id="audioPlayer" controls style="width:100%;margin-top:1rem;display:none;"></audio>
                        <div id="scriptList"></div>

                    </div>
                </div>
               
            </div>
        </div>
    </div>

    <script src="~/js/handle-sidbar/home-sidebar.js"></script>
    <script>
                $(document).ready(function () {
            // Sidebar toggle functionality
            $('#sidebarCollapse').on('click', function () {
                $('#sidebar').toggleClass('collapsed');
            });
        });
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    

    <script>

        

            function setupAudioEventListeners() {
                // Time update event for progress bar
                audioPlayer.addEventListener('timeupdate', () => {
                    audioProgress.value = Math.floor(audioPlayer.currentTime);
                    currentTimeEl.textContent = formatTime(audioPlayer.currentTime);
                });

                // When metadata is loaded
                audioPlayer.addEventListener('loadedmetadata', () => {
                    durationEl.textContent = formatTime(audioPlayer.duration);
                    audioProgress.max = Math.floor(audioPlayer.duration);
                });

                // When audio ends
                audioPlayer.addEventListener('ended', () => {
                    playPauseIcon.classList.remove('fa-pause');
                    playPauseIcon.classList.add('fa-play');
                    audioProgress.value = 0;
                    currentTimeEl.textContent = '00:00';
                    setVisualizerPlaying(false);
                });
            }

            // Function to load a specific podcast
            async function loadPodcast(index) {
                try {
                    loader.style.display = 'flex';
                    const podcast = podcasts[index];
                    currentPodcastIndex = index;

                    // Update playlist active state
                    updatePlaylistActiveState(index);

                    // Split content into sentences and store them
                    const sentences = podcast.content.match(/[^.!?]+[.!?]+/g) || [podcast.content];

                    // Create a single container for the active sentence
                    subtitleContainer.innerHTML = '<div class="subtitle-sentence active"></div>';
                    const subtitleElement = subtitleContainer.querySelector('.subtitle-sentence');
                    let currentSentenceIndex = 0;
                    let animationFrameId = null;

                    function updateSubtitle(currentTime, duration) {
                        // Calculate which sentence should be shown based on current time
                        const sentenceDuration = duration / sentences.length;
                        const newIndex = Math.min(
                            sentences.length - 1,
                            Math.floor(currentTime / sentenceDuration)
                        );

                        if (newIndex !== currentSentenceIndex) {
                            currentSentenceIndex = newIndex;
                            // Animate out the old text
                            subtitleElement.style.opacity = '0';
                            subtitleElement.style.transform = 'translateY(20px)';

                            // After fade out, update text and fade in
                            setTimeout(() => {
                                subtitleElement.textContent = sentences[currentSentenceIndex].trim();
                                subtitleElement.style.opacity = '1';
                                subtitleElement.style.transform = 'translateY(0)';
                            }, 300);
                        }
                    }

                    // Audio event handlers for subtitles
                    audioPlayer.onplay = function() {
                        setVisualizerPlaying(true);

                        function animate() {
                            if (!audioPlayer.paused && !audioPlayer.ended) {
                                updateSubtitle(audioPlayer.currentTime, audioPlayer.duration);
                                animationFrameId = requestAnimationFrame(animate);
                            }
                        }
                        animationFrameId = requestAnimationFrame(animate);
                    };

                    audioPlayer.onpause = function() {
                        setVisualizerPlaying(false);
                        if (animationFrameId) {
                            cancelAnimationFrame(animationFrameId);
                        }
                    };

                    audioPlayer.onended = function() {
                        setVisualizerPlaying(false);
                        if (animationFrameId) {
                            cancelAnimationFrame(animationFrameId);
                        }
                    };

                    // Set initial subtitle
                    subtitleElement.textContent = sentences[0].trim();

                    // Generate audio for the podcast content
                    const formData = new FormData();
                    formData.append('text', podcast.content);
                    const audioResponse = await fetch('/api/audio/generate-english', {
                        method: 'POST',
                        body: formData
                    });

                    if (!audioResponse.ok) throw new Error('Failed to generate audio');
                    const audioBlob = await audioResponse.blob();
                    const audioUrl = URL.createObjectURL(audioBlob);
                    audioSource.src = audioUrl;
                    audioPlayer.load();

                    // Reset player state
                    playPauseIcon.classList.remove('fa-pause');
                    playPauseIcon.classList.add('fa-play');
                    setVisualizerPlaying(false);

                } catch (error) {
                    console.error('Error loading podcast:', error);
                    subtitleContainer.innerHTML = '<span style="color:red;font-size:1.2rem;">Lỗi khi tải podcast: ' + error.message + '</span>';
                } finally {
                    loader.style.display = 'none';
                }
            }

            // Function to update playlist UI
            function updatePlaylist(podcasts) {
                playlistItems.innerHTML = podcasts.map((podcast, index) => `
                    <div class="playlist-item ${index === currentPodcastIndex ? 'active' : ''}"
                         data-index="${index}">
                        <div class="playlist-item-icon">
                            <i class="fas ${index === currentPodcastIndex ? 'fa-play' : 'fa-music'}"></i>
                        </div>
                        <div class="playlist-item-content">
                            <div class="playlist-item-title">${podcast.title || `Podcast ${index + 1}`}</div>
                            <div class="playlist-item-description">${podcast.content ? podcast.content.substring(0, 100) + '...' : 'No description available'}</div>
                        </div>
                        <div class="playlist-item-duration">
                            <i class="fas fa-clock"></i> ${formatTime(podcast.duration || 0)}
                        </div>
                    </div>
                `).join('');

                // Add click handlers to playlist items
                document.querySelectorAll('.playlist-item').forEach(item => {
                    item.addEventListener('click', () => {
                        const index = parseInt(item.dataset.index);
                        if (index !== currentPodcastIndex) {
                            loadPodcast(index);
                        }
                    });
                });
            }

            // Function to update active state in playlist
            function updatePlaylistActiveState(activeIndex) {
                document.querySelectorAll('.playlist-item').forEach((item, index) => {
                    const icon = item.querySelector('i');
                    if (index === activeIndex) {
                        item.classList.add('active');
                        icon.classList.remove('fa-music');
                        icon.classList.add('fa-play');
                    } else {
                        item.classList.remove('active');
                        icon.classList.remove('fa-play');
                        icon.classList.add('fa-music');
                    }
                });
            }

            // Previous/Next podcast handlers
            prevPostcard.addEventListener('click', () => {
                if (currentPodcastIndex > 0) {
                    loadPodcast(currentPodcastIndex - 1);
                }
            });

            nextPostcard.addEventListener('click', () => {
                if (currentPodcastIndex < podcasts.length - 1) {
                    loadPodcast(currentPodcastIndex + 1);
                }
            });

            // ... rest of your existing audio player code ...
        });

        const audio = document.getElementById('audioPlayer');
        const playPauseBtn = document.getElementById('playPauseBtn');
        const playPauseIcon = playPauseBtn.querySelector('i');
        const currentTimeEl = document.getElementById('currentTime');
        const durationEl = document.getElementById('duration');
        const audioProgress = document.getElementById('audioProgress');
        const audioSource = document.getElementById('audioSource');

        // Đặt đường dẫn file audio ở đây
        audioSource.src = '/path/to/your/audio.mp3';
        audio.load();

        // Định dạng thời gian
        function formatTime(sec) {
            const m = Math.floor(sec / 60);
            const s = Math.floor(sec % 60);
            return `${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;
        }

        // Khi audio đã load xong metadata
        audio.addEventListener('loadedmetadata', () => {
            durationEl.textContent = formatTime(audio.duration);
            audioProgress.max = Math.floor(audio.duration);
        });

        // Cập nhật progress và thời gian hiện tại
        audio.addEventListener('timeupdate', () => {
            audioProgress.value = Math.floor(audio.currentTime);
            currentTimeEl.textContent = formatTime(audio.currentTime);
        });

        // Play/Pause
        playPauseBtn.addEventListener('click', () => {
            if (audio.paused) {
                audio.play();
                playPauseIcon.classList.remove('fa-play');
                playPauseIcon.classList.add('fa-pause');
            } else {
                audio.pause();
                playPauseIcon.classList.remove('fa-pause');
                playPauseIcon.classList.add('fa-play');
            }
        });

        // Seek khi kéo thanh progress
        audioProgress.addEventListener('input', () => {
            audio.currentTime = audioProgress.value;
        });

        // Khi audio kết thúc
        audio.addEventListener('ended', () => {
            playPauseIcon.classList.remove('fa-pause');
            playPauseIcon.classList.add('fa-play');
            audio.currentTime = 0;
            audioProgress.value = 0;
            currentTimeEl.textContent = '00:00';
        });

        const skipBackward = document.getElementById('skipBackward');
        const skipForward = document.getElementById('skipForward');
        const prevPostcard = document.getElementById('prevPostcard');
        const nextPostcard = document.getElementById('nextPostcard');
        const volumeSlider = document.getElementById('volumeSlider');
        const toggleMute = document.getElementById('toggleMute');
        const togglePlaylist = document.getElementById('togglePlaylist');
        const closePlaylist = document.getElementById('closePlaylist');
        const playlist = document.getElementById('playlist');
        const playlistItems = document.getElementById('playlistItems');
        const progressContainer = document.querySelector('.progress-container');
        const progressTooltip = document.querySelector('.progress-tooltip');

        let currentPostcardIndex = 0;
        let postcardsList = [];
        let previousVolume = 1;

        // Skip 15 seconds backward
        skipBackward.addEventListener('click', () => {
            audio.currentTime = Math.max(0, audio.currentTime - 15);
        });

        // Skip 15 seconds forward
        skipForward.addEventListener('click', () => {
            audio.currentTime = Math.min(audio.duration, audio.currentTime + 15);
        });

        // Volume control
        volumeSlider.addEventListener('input', (e) => {
            const volume = e.target.value / 100;
            audio.volume = volume;
            updateVolumeIcon(volume);
        });

        // Toggle mute
        toggleMute.addEventListener('click', () => {
            if (audio.volume > 0) {
                previousVolume = audio.volume;
                audio.volume = 0;
                volumeSlider.value = 0;
            } else {
                audio.volume = previousVolume;
                volumeSlider.value = previousVolume * 100;
            }
            updateVolumeIcon(audio.volume);
        });

        function updateVolumeIcon(volume) {
            const icon = toggleMute.querySelector('i');
            icon.className = volume === 0
                ? 'fas fa-volume-mute'
                : volume < 0.5
                    ? 'fas fa-volume-down'
                    : 'fas fa-volume-up';
        }

        // Progress bar tooltip
        progressContainer.addEventListener('mousemove', (e) => {
            const rect = progressContainer.getBoundingClientRect();
            const pos = (e.clientX - rect.left) / rect.width;
            const time = pos * audio.duration;
            progressTooltip.textContent = formatTime(time);
            progressTooltip.style.display = 'block';
            progressTooltip.style.left = `${e.clientX - rect.left}px`;
        });

        progressContainer.addEventListener('mouseleave', () => {
            progressTooltip.style.display = 'none';
        });

        // Playlist toggle
        togglePlaylist.addEventListener('click', () => {
            playlist.classList.toggle('active');
        });

        closePlaylist.addEventListener('click', () => {
            playlist.classList.remove('active');
        });

        // Add CSS styles for subtitles
        const style = document.createElement('style');
        style.textContent = `
            .subtitle-container {
                padding: 2rem;
                min-height: 120px;
                display: flex;
                align-items: center;
                justify-content: center;
                background: rgba(255, 255, 255, 0.1);
                border-radius: 15px;
                backdrop-filter: blur(10px);
                margin: 20px 0;
                position: relative;
                overflow: hidden;
            }

            .subtitle-sentence {
                width: 90%;
                padding: 20px;
                border-radius: 12px;
                background: linear-gradient(135deg, rgba(255, 107, 107, 0.95), rgba(255, 107, 107, 0.8));
                color: white;
                font-size: 1.3rem;
                line-height: 1.6;
                text-align: center;
                opacity: 1;
                transform: translateY(0);
                transition: all 0.3s ease-out;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
                text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
            }

            @@media (max-width: 768px) {
                .subtitle-sentence {
                    font-size: 1.1rem;
                    padding: 15px;
                }
            }
        `;
        document.head.appendChild(style);
    </script>

    <div id="popupPlayer" class="podcast-popup-player">
        <button class="popup-close" id="closePopupBtn" title="Đóng">&times;</button>
        <div style="flex:1;">
            <div class="popup-title">@Model.Title</div>
            <div class="popup-controls">
                <button class="popup-play" id="popupPlayBtn"><i class="fa fa-play"></i></button>
                <span class="popup-time" id="popupCurTime">00:00</span>
                <input type="range" class="popup-progress" id="popupProgress" min="0" max="100" value="0">
                <span class="popup-time" id="popupDuration">00:00</span>
                <button class="popup-speed" id="popupSpeedBtn">1x</button>
            </div>
        </div>
    </div>
    <script>
        // Popup player logic
        let popupPlayer = document.getElementById('popupPlayer');
        let popupPlayBtn = document.getElementById('popupPlayBtn');
        let popupCurTime = document.getElementById('popupCurTime');
        let popupDuration = document.getElementById('popupDuration');
        let popupProgress = document.getElementById('popupProgress');
        let popupSpeedBtn = document.getElementById('popupSpeedBtn');
        let closePopupBtn = document.getElementById('closePopupBtn');

        // Tạo audio ẩn dùng chung
        let popupAudio = new Audio();
        popupAudio.preload = "auto";
        popupAudio.src = "";
        popupAudio.volume = 1.0;
        let popupAudioLoaded = false;

        // Lấy link audio từ audioPlayer phía trên (nếu đã có) hoặc fetch lại
        document.addEventListener('DOMContentLoaded', function() {
            // Lấy audio link từ player lớn (nếu đã load)
            let audioPlayer = document.getElementById('audioPlayer');
            if (audioPlayer && audioPlayer.src) popupAudio.src = audioPlayer.src;

            // Tự động show player khi audio play hoặc scroll gần cuối trang
            let showWhenScroll = false, userClosed = false;
            window.addEventListener('scroll', function() {
                if (userClosed) return;
                if (window.scrollY > window.innerHeight / 2) {
                    if (!showWhenScroll) { showPopupPlayer(); showWhenScroll = true; }
                }
            });

            // Khi bấm play trên player lớn, kích hoạt popup nổi
            if (audioPlayer) {
                audioPlayer.addEventListener('play', function() {
                    popupAudio.src = audioPlayer.src;
                    showPopupPlayer();
                    syncPopupWithAudio(audioPlayer);
                });
                audioPlayer.addEventListener('pause', function() { popupPlayBtn.querySelector('i').className = 'fa fa-play'; });
            }
        });

        // Show popup
        function showPopupPlayer() {
            // popupPlayer.classList.add('active');
            // popupPlayer.style.display = 'flex';
            // popupPlayer.style.opacity = '1';
        }

        // Đóng popup
        closePopupBtn.onclick = function() {
            popupPlayer.classList.remove('active');
            popupPlayer.style.opacity = '0';
            setTimeout(() => popupPlayer.style.display = 'none', 200);
            userClosed = true;
            popupAudio.pause();
        };

        // Play/Pause
        popupPlayBtn.onclick = function() {
            if (popupAudio.paused) { popupAudio.play(); }
            else { popupAudio.pause(); }
        };
        popupAudio.onplay = function() { popupPlayBtn.querySelector('i').className = 'fa fa-pause'; }
        popupAudio.onpause = function() { popupPlayBtn.querySelector('i').className = 'fa fa-play'; }

        // Cập nhật progress/time
        popupAudio.ontimeupdate = function() {
            popupCurTime.textContent = formatTime(popupAudio.currentTime);
            popupProgress.value = popupAudio.currentTime;
        };
        popupAudio.onloadedmetadata = function() {
            popupDuration.textContent = formatTime(popupAudio.duration);
            popupProgress.max = Math.floor(popupAudio.duration);
        };
        // Khi seek
        popupProgress.oninput = function() {
            popupAudio.currentTime = this.value;
        };

        // Đổi tốc độ phát
        let speedArr = [1, 1.25, 1.5, 2];
        let speedIdx = 0;
        popupSpeedBtn.onclick = function() {
            speedIdx = (speedIdx + 1) % speedArr.length;
            popupAudio.playbackRate = speedArr[speedIdx];
            popupSpeedBtn.textContent = speedArr[speedIdx] + "x";
        };

        // Định dạng phút:giây
        function formatTime(sec) {
            if (!sec || isNaN(sec)) return "00:00";
            let m = Math.floor(sec/60), s = Math.floor(sec%60);
            return (m<10?"0":"")+m+":"+(s<10?"0":"")+s;
        }

        // Đồng bộ popup với player lớn
        function syncPopupWithAudio(mainAudio) {
            // Khi play trên popup, pause ở main (và ngược lại)
            popupPlayBtn.onclick = function() {
                if (popupAudio.paused) { popupAudio.play(); mainAudio.pause(); }
                else { popupAudio.pause(); }
            };
            mainAudio.addEventListener('play', ()=>{ popupAudio.pause(); });
        }

    </script>

    <div id="podcastPlayerBar" class="podcast-popup-bar">
        <button id="popupPrevBtn" class="btn btn-secondary btn-sm"><i class="fas fa-backward"></i></button>
        <button id="popupPlayPauseBtn" class="btn btn-success btn-sm"><i class="fas fa-play"></i></button>
        <button id="popupNextBtn" class="btn btn-secondary btn-sm"><i class="fas fa-forward"></i></button>
        <span id="popupCurrentTimeLabel">0:00</span>
        <input id="popupProgressBar" type="range" min="0" max="100" value="0" style="flex:1;">
        <span id="popupTotalTimeLabel">0:00</span>
        <span class="script-current" id="popupScriptCurrent"></span>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function () {
        const fullScript = '@Model.Content';
        function splitByWords(text, wordsPerChunk) {
            const words = text.split(/\s+/);
            const chunks = [];
            for (let i = 0; i < words.length; i += wordsPerChunk) {
                const chunk = words.slice(i, i + wordsPerChunk).join(' ');
                if (i + wordsPerChunk >= words.length && chunk.trim().split(/\s+/).length < 5) break;
                chunks.push(chunk);
            }
            return chunks;
        }
        const scriptParts = splitByWords(fullScript, 20);
        const audioPlayer = document.getElementById('audioPlayer');
        const scriptList = document.getElementById('scriptList');
        const playPauseBtn = document.getElementById('playPauseBtn');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const progressBar = document.getElementById('progressBar');
        const currentTimeLabel = document.getElementById('currentTimeLabel');
        const totalTimeLabel = document.getElementById('totalTimeLabel');
        // Popup controls
        const popupBar = document.getElementById('podcastPlayerBar');
        const popupPlayPauseBtn = document.getElementById('popupPlayPauseBtn');
        const popupPrevBtn = document.getElementById('popupPrevBtn');
        const popupNextBtn = document.getElementById('popupNextBtn');
        const popupProgressBar = document.getElementById('popupProgressBar');
        const popupCurrentTimeLabel = document.getElementById('popupCurrentTimeLabel');
        const popupTotalTimeLabel = document.getElementById('popupTotalTimeLabel');
        const popupScriptCurrent = document.getElementById('popupScriptCurrent');

        let currentIdx = 0;
        let isPlayingAll = false;
        let isPaused = false;
        const audioCache = {};
        let partDurations = scriptParts.map(part => Math.round(part.split(/\s+/).length * 0.5)); // 0.5s/word
        let totalDuration = partDurations.reduce((a, b) => a + b, 0);

        // Hiển thị script từng đoạn
        scriptParts.forEach((part, idx) => {
            const div = document.createElement('div');
            div.id = 'scriptPart_' + idx;
            div.textContent = part.trim();
            div.style.margin = '0.5rem 0';
            div.style.padding = '0.5rem';
            div.style.borderRadius = '6px';
            scriptList.appendChild(div);
        });

        function formatTime(sec) {
            sec = Math.round(sec);
            return `${Math.floor(sec/60)}:${(sec%60).toString().padStart(2,'0')}`;
        }

        function updateTotalTime() {
            totalDuration = partDurations.reduce((a, b) => a + b, 0);
            totalTimeLabel.textContent = formatTime(totalDuration);
            popupTotalTimeLabel.textContent = formatTime(totalDuration);
        }
        updateTotalTime();

        // Fetch audio cho 1 đoạn
        async function fetchAudio(idx) {
            if (audioCache[idx]) return audioCache[idx];
            const part = scriptParts[idx].trim();
            const formData = new FormData();
            formData.append('text', part);
            const response = await fetch('/api/audio/generate-english', {
                method: 'POST',
                body: formData
            });
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(errorText);
            }
            const audioBlob = await response.blob();
            const audioUrl = URL.createObjectURL(audioBlob);
            audioCache[idx] = audioUrl;
            // Cập nhật lại thời lượng thực tế
            const tempAudio = new Audio(audioUrl);
            tempAudio.addEventListener('loadedmetadata', function () {
                partDurations[idx] = tempAudio.duration;
                updateTotalTime();
            });
            return audioUrl;
        }

        function getCurrentGlobalTime(localTime, idx) {
            let sum = 0;
            for (let i = 0; i < idx; i++) sum += partDurations[i];
            return sum + localTime;
        }
        function getPartFromGlobalTime(globalTime) {
            let sum = 0;
            for (let i = 0; i < partDurations.length; i++) {
                if (globalTime < sum + partDurations[i]) {
                    return { idx: i, localTime: globalTime - sum };
                }
                sum += partDurations[i];
            }
            return { idx: partDurations.length - 1, localTime: partDurations[partDurations.length - 1] };
        }

        async function playPart(idx, seekTime = 0) {
            if (idx >= scriptParts.length) {
                isPlayingAll = false;
                playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
                popupPlayPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
                return;
            }
            scriptParts.forEach((_, i) => {
                const el = document.getElementById('scriptPart_' + i);
                if (el) el.style.background = (i === idx) ? '#ffeaa7' : '';
            });
            try {
                const audioUrl = await fetchAudio(idx);
                audioPlayer.src = audioUrl;
                audioPlayer.currentTime = seekTime;
                audioPlayer.play();
                playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
                popupPlayPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
                currentIdx = idx;
                isPaused = false;
                if (idx + 1 < scriptParts.length) {
                    fetchAudio(idx + 1).catch(() => {});
                }
            } catch (err) {
                alert('Không lấy được audio cho đoạn này: ' + err.message);
                isPlayingAll = false;
                playPauseBtn.innerHTML = '<i class=\"fas fa-play\"></i>';
                popupPlayPauseBtn.innerHTML = '<i class=\"fas fa-play\"></i>';
            }
        }

        function updateProgressBar() {
            const localTime = audioPlayer.currentTime;
            const globalTime = getCurrentGlobalTime(localTime, currentIdx);
            progressBar.value = Math.round(globalTime / totalDuration * 100);
            currentTimeLabel.textContent = formatTime(globalTime);
            // Đồng bộ popup
            popupProgressBar.value = progressBar.value;
            popupCurrentTimeLabel.textContent = currentTimeLabel.textContent;
            popupTotalTimeLabel.textContent = totalTimeLabel.textContent;
            popupScriptCurrent.textContent = scriptParts[currentIdx] || '';
        }

        function updateTotalTime() {
            totalDuration = partDurations.reduce((a, b) => a + b, 0);
            totalTimeLabel.textContent = formatTime(totalDuration);
            popupTotalTimeLabel.textContent = formatTime(totalDuration);
        }

        playPauseBtn.onclick = function () {
            if (audioPlayer.src && !audioPlayer.paused) {
                audioPlayer.pause();
                playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
                popupPlayPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
                isPaused = true;
            } else {
                if (audioPlayer.src) {
                    audioPlayer.play();
                    playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
                    popupPlayPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
                    isPaused = false;
                } else {
                    isPlayingAll = true;
                    playPart(0);
                }
            }
        };
        nextBtn.onclick = function () {
            if (currentIdx + 1 < scriptParts.length) {
                playPart(currentIdx + 1);
            }
        };
        prevBtn.onclick = function () {
            if (currentIdx > 0) {
                playPart(currentIdx - 1);
            }
        };
        // Popup controls
        popupPlayPauseBtn.onclick = playPauseBtn.onclick;
        popupPrevBtn.onclick = prevBtn.onclick;
        popupNextBtn.onclick = nextBtn.onclick;
        popupProgressBar.oninput = function () {
            // Tua thực sự: phát đúng đoạn và vị trí tương ứng
            const globalTime = popupProgressBar.value / 100 * totalDuration;
            const { idx, localTime } = getPartFromGlobalTime(globalTime);
            if (idx !== currentIdx) {
                playPart(idx, localTime);
            } else {
                audioPlayer.currentTime = localTime;
            }
            // Đồng bộ lại thanh chính
            progressBar.value = popupProgressBar.value;
            updateProgressBar();
        };

        audioPlayer.onended = function () {
            if (isPlayingAll && currentIdx + 1 < scriptParts.length) {
                playPart(currentIdx + 1);
            } else {
                playPauseBtn.innerHTML = '<i class=\"fas fa-play\"></i>';
                popupPlayPauseBtn.innerHTML = '<i class=\"fas fa-play\"></i>';
            }
        };
        audioPlayer.ontimeupdate = updateProgressBar;
        progressBar.oninput = function () {
            const globalTime = progressBar.value / 100 * totalDuration;
            const { idx, localTime } = getPartFromGlobalTime(globalTime);
            if (idx !== currentIdx) {
                playPart(idx, localTime);
            } else {
                audioPlayer.currentTime = localTime;
            }
            updateProgressBar();
        };
        updateTotalTime();

        // Hiện/ẩn popup khi cuộn
        const playerSection = document.querySelector('.custom-audio-player');
        function checkPlayerInView() {
            const rect = playerSection.getBoundingClientRect();
            if (rect.bottom < 0 || rect.top > window.innerHeight) {
                popupBar.style.display = 'flex';
            } else {
                popupBar.style.display = 'none';
            }
        }
        window.addEventListener('scroll', checkPlayerInView);
        window.addEventListener('resize', checkPlayerInView);
        checkPlayerInView();
    });
    </script>
</body>
</html>