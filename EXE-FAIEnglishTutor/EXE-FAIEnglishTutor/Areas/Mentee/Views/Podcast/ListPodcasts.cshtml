@{
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
}

<!-- Page Content -->
<div id="content" class="p-4 p-md-5">
    <div class="sticky-wrapper sticky-wrapper-list-courses">
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-fluid">
                <button type="button" id="sidebarCollapse" class="btn btn-sidebar-custom">
                    <i class="fa fa-bars"></i>
                    <span class="sr-only">Toggle Menu</span>
                </button>
                <button class="btn btn-outline-secondary ml-2" onclick="history.back()">
                    <i class="fa fa-arrow-left"></i> Back
                </button>
                <button class="btn btn-dark d-inline-block d-lg-none ml-auto" type="button"
                        data-bs-target="#navbarSupportedContent"
                        aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <i class="fa fa-bars"></i>
                </button>

                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="nav navbar-nav ml-auto">
                        @if (User.Identity.IsAuthenticated)
                        {
                            var fullName = User.Identity.Name;
                            var avatarUrl = User.FindFirst("Avatar")?.Value;
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle nav-link-avatar" href="#" id="avatarDropdown" role="button"
                                   data-bs-toggle="dropdown" aria-expanded="false">
                                    <div class="nav-img">
                                        <img src="@avatarUrl" alt="Avatar" class="img-fluid" style="border-radius: 50%;">
                                    </div>
                                </a>
                                <div class="menu-items dropdown-menu dropdown-menu-end" aria-labelledby="avatarDropdown">
                                    <div class="menu-title">
                                        <h6 class="dropdown-header">Hello, <span>@fullName</span></h6>
                                    </div>
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item" asp-controller="Profile" asp-action="index">
                                        <i class="bi bi-person-circle"></i> View Profile
                                    </a>
                                    <div class="dropdown-divider"></div>
                                    <a id="logout-link" class="dropdown-item text-danger" href="#">
                                        <i class="bi bi-box-arrow-right"></i> <span id="logoutOption">Logout</span>
                                    </a>
                                    <form id="logoutForm" asp-area="" asp-controller="Account" asp-action="Logout" method="post" style="display: none;"></form>
                                </div>
                            </li>
                        }
                        else
                        {
                            <a class="btn-login-custom btn" asp-area="" asp-controller="Account" asp-action="Login">Login now</a>
                        }
                    </ul>
                </div>
            </div>
        </nav>

        <!-- Nội dung podcast -->
        <div class="container-fluid mt-4 podcast-container">
            <!-- Horizontal topic navigation -->
            <ul class="nav nav-pills mb-4">
                <li class="nav-item">
                    <a class="nav-link podcast-nav-link @(string.IsNullOrEmpty(ViewBag.CurrentTopic) ? "active" : "")"
                       href="@Url.Action("Index")">All Topics</a>
                </li>
                @foreach (var t in ViewBag.Topics)
                {
                    <li class="nav-item">
                        <a class="nav-link podcast-nav-link @(ViewBag.CurrentTopic == t ? "active" : "")"
                           href="@Url.Action("Index", new { topic = t })">@t</a>
                    </li>
                }
            </ul>

            <!-- Hiển thị chủ đề -->
            <h2 class="topic-title mb-4">@(ViewBag.CurrentTopic ?? "All Podcasts")</h2>

            <!-- Hai podcast mới nhất -->
            <div class="row gx-3 gy-3 mb-4">
                @foreach (var podcast in ViewBag.NewestPodcasts)
                {
                    <div class="col-12 col-md-6">
                        <a href="@Url.Action("ListenPC", "Podcast", new { id = podcast.Id })" class="text-decoration-none">
                            <div class="card podcast-card podcast-card-large h-100">
                                <div class="card-body">
                                    <h3 class="card-title">@podcast.Title</h3>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>

            <!-- Các podcast cũ hơn -->
            <div class="row gx-3 gy-3">
                @foreach (var podcast in ViewBag.PaginatedOlderPodcasts)
                {
                    <div class="col-12 col-md-4">
                        <a href="@Url.Action("ListenPC", "Podcast", new { id = podcast.Id })" class="text-decoration-none">
                            <div class="card podcast-card podcast-card-small h-100">
                                <div class="card-body">
                                    <h3 class="card-title">@podcast.Title</h3>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>

            <!-- Phân trang -->
            @if (ViewBag.TotalPages > 1)
            {
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        @for (int i = 1; i <= ViewBag.TotalPages; i++)
                        {
                            <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { page = i, topic = ViewBag.CurrentTopic })">@i</a>
                            </li>
                        }
                    </ul>
                </nav>
            }
        </div>

        <style>
            .podcast-container {
                max-height: 600px;
                overflow-y: auto;
                overflow-x: hidden; /* chặn cuộn ngang */
                padding: 0;
                margin: 0 auto;
                width: 100%; /* an toàn hơn 100vw */
            }



        .podcast-card {
            border: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: transform 0.2s;
            margin: 0;
        }

        .podcast-card:hover {
            transform: translateY(-5px);
        }

        .podcast-card .card-title {
            font-size: 1.1rem;
            color: #333;
            margin-bottom: 0;
        }

        .podcast-card-large {
            min-height: 140px;
        }

        .podcast-card-small {
            min-height: 120px;
        }

        .row.gx-3 > [class^="col-"], .row.gy-3 > [class^="col-"] {
            padding-left: 12px;
            padding-right: 12px;
            margin-bottom: 0;
        }

        @@media (max-width: 767.98px) {
            .podcast-card-large, .podcast-card-small {
                min-height: 100px;
            }
            .podcast-container {
                max-height: 400px;
            }
        }
        </style>

        
    </div>
</div>
@section Scripts {

    <style>
        .head-info {
            background-color: #fff;
            border-radius: 12px;
        }


        .input-group .form-control {
            border-right: none;
        }

        .input-group .btn {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }

        .vertical-divider {
            width: 1px;
            height: 24px;
            background-color: #ccc;
        }

        .no-border {
            border: none !important;
            box-shadow: none;
        }

            .no-border:focus {
                outline: none;
                box-shadow: none;
            }


        .search-group .form-control {
            background-color: transparent;
        }

        .dropdown-btn {
            text-align: start;
            background: #fff;
            border: none;
            z-index: 1 !important;
            margin-bottom: 3px;
            margin-top: -10px;
            position: unset;
        }

            .dropdown-btn:hover {
                background: #fff !important;
                border: none;
            }

            .dropdown-btn:focus {
                background: #fff !important;
                border: none;
            }

        .text-level {
            position: relative;
            width: 100%;
            z-index: 2 !important;
            font-size: 13px;
            font-weight: bolder;
            margin: 10px 0 -0px 10px;
            cursor: pointer;
        }


        .list-courses .container-fluid {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            /* justify-content: space-between; /* Căn chỉnh khoảng cách giữa các phần tử */ */ padding: 0 !important;
        }

        @@media (max-width: 768px) {
            .list-courses .container-fluid {
                margin-top: 42px !important;
            }
        }

        @@media (max-width: 991px) {
            .list-courses .container-fluid {
                margin-top: 20px;
            }
        }

        .list-courses .card {
            width: 100% !important;
            height: 270px;
        }

        .list-courses .course {
            flex: 1 1 calc(20% - 10px);
            /* Chiều rộng mỗi phần tử chiếm 20% trừ đi khoảng cách */
            max-width: calc(20% - 10px);
            /* Đảm bảo không vượt quá 20% */
            box-sizing: border-box;
            /* Đảm bảo padding không làm tăng kích thước */
        }

        .sticky-wrapper-list-courses {
            height: 200px;
        }

        @@media (max-width: 1200px) {
            .list-courses .course {
                flex: 1 1 calc(25% - 10px);
                /* Chiều rộng 4 cột */
                max-width: calc(25% - 10px);
            }
        }

        @@media (max-width: 900px) {
            .list-courses .course {
                flex: 1 1 calc(33.33% - 10px);
                /* Chiều rộng 3 cột */
                max-width: calc(33.33% - 10px);
            }
        }

        @@media (max-width: 600px) {
            .list-courses .course {
                flex: 1 1 calc(50% - 10px);
                /* Chiều rộng 2 cột */
                max-width: calc(50% - 10px);
            }

            .level-container {
                width: 40%;
            }
        }

        @@media (max-width: 400px) {
            .list-courses .course {
                flex: 1 1 100%;
                /* Chiều rộng 1 cột */
                max-width: 100%;
            }
        }

        .btn-create-situation {
            background: #fff;
            margin: 0 20px 10px 20px;
            border-radius: 8px;
            padding: 8px 10px;
            font-weight: bold;
        }

        .btn-save-crate-situation {
            padding-left: 70px;
            padding-right: 70px;
            background: orangered;
            color: #fff;
            border-radius: 10px;
            font-weight: 500;
        }

            .btn-save-crate-situation:hover {
                background: orange;
                color: #fff;
            }

        .form-label {
            font-weight: bolder;
        }

        .card-text {
            justify-content: start !important;
        }

    </style>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const situationLinks = document.querySelectorAll(".situation-link");

            situationLinks.forEach(link => {
                link.addEventListener("click", function (e) {
                    const requiresLogin = link.getAttribute("data-login") === "True";
                    const redirectUrl = link.getAttribute("data-url");

                    if (requiresLogin) {
                        e.preventDefault();

                        if (confirm(" You need to login to access this content.Do you want to login now ? ")) {
                            window.location.href = "/Account/Login"; // hoặc route login thực tế của bạn
                        }
                    } else {
                        // Người đã đăng nhập thì chuyển trang như bình thường
                        window.location.href = redirectUrl;
                    }
                });
            });
        });
    </script>


    <script>
             let selectedCategory = "";

             // Khi chọn category
             document.querySelectorAll('.dropdown-item').forEach(item => {
                 item.addEventListener('click', function (e) {
                     e.preventDefault();
                     selectedCategory = this.dataset.category;
                     document.getElementById("categoryDropdown").innerText = this.innerText;
                     fetchSituations(); // gọi API khi đổi category
                 });
             });

             // Khi nhập từ khóa
             document.getElementById('searchCourse').addEventListener('input', function () {
                 fetchSituations(); // gọi API khi gõ
             });

        // Hàm gọi API và hiển thị kết quả
         function fetchSituations() {
             const keyword = document.getElementById("searchCourse").value;
             const dynamicContainer = document.getElementById("situation-list");


             fetch(`/Mentee/Listening/ListPartial?keyword=${encodeURIComponent(keyword)}&category=${encodeURIComponent(selectedCategory)}`)

                 .then(response => {
                     if (!response.ok) {
                         throw new Error('Lỗi khi tải danh sách tình huống');
                     }
                     return response.json();
                 })
                 .then(data => {
                     dynamicContainer.innerHTML = ""; // Xóa nội dung cũ trong container động

                     if (data.length === 0) {
                         dynamicContainer.innerHTML = "<p>Không có tình huống nào phù hợp.</p>";
                         return;
                     }

                     data.forEach(item => {
                         const html = `
                             <div class="course">

                                 <a href="/Lesson/Step1/${item.situationId}" class="card-link">

                                     <div class="flex-shrink-0">
                                         <div class="card">
                                             <img src="${item.imageUrl}" alt="Image of ${item.situationName}" class="card-img-top">
                                             <div class="card-title-overlay position-absolute">${item.level.levelName}</div>
                                             <div class="overlay-home"></div>
                                             <div class="card-body">
                                                 <p class="card-text" style="color: #fff;">${item.situationName}</p>
                                             </div>
                                         </div>
                                     </div>
                                 </a>
                             </div>
                         `;
                         dynamicContainer.insertAdjacentHTML('beforeend', html);
                     });
                 })
                 .catch(error => {
                     console.error('Error:', error);
                     dynamicContainer.innerHTML = "<p>Đã xảy ra lỗi khi tải danh sách. Vui lòng thử lại.</p>";
                 });
         }


    </script>



    <script>



        function toggleDropdown() {
            const dropdownButton = document.getElementById('categoryDropdown'); // Nút dropdown
            const dropdownMenu = dropdownButton.nextElementSibling; // Menu dropdown

            // Kiểm tra trạng thái của menu
            if (dropdownMenu.classList.contains('show')) {
                // Nếu menu đang mở -> đóng lại
                dropdownButton.click(); // Giả lập click vào nút để đóng dropdown
            } else {
                // Nếu menu đang đóng -> mở ra
                dropdownButton.click(); // Giả lập click vào nút để mở dropdown
            }
        }


    </script>
}